{"version":3,"file":"WebXRExperience-ad5f5abb.js","sources":["../../src/pages/advanced/WebXRExperience.jsx"],"sourcesContent":["import React, { Suspense, useRef, useState, useEffect, useCallback } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls, Text, Box, Sphere, Cylinder } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\nconst XRButton = styled.button`\n  background: linear-gradient(135deg, var(--accent-color), #0066cc);\n  color: white;\n  border: none;\n  padding: 1rem 2rem;\n  border-radius: 8px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  margin: 0.5rem;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0, 255, 255, 0.3);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n  }\n`\n\nconst StatusIndicator = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin: 1rem 0;\n  padding: 0.5rem;\n  border-radius: 4px;\n  background: rgba(0, 0, 0, 0.3);\n  \n  .status-dot {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    background: ${props => props.status === 'supported' ? '#4CAF50' : \n                          props.status === 'not-supported' ? '#f44336' : '#ff9800'};\n  }\n`\n\n// Interactive VR/AR objects\nfunction InteractiveBox({ position, color, onSelect }) {\n  const meshRef = useRef()\n  const [hovered, setHovered] = useState(false)\n  const [selected, setSelected] = useState(false)\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.x = state.clock.elapsedTime * 0.5\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.3\n      \n      if (hovered || selected) {\n        meshRef.current.scale.setScalar(1.2)\n      } else {\n        meshRef.current.scale.setScalar(1)\n      }\n    }\n  })\n  \n  const handleClick = () => {\n    setSelected(!selected)\n    onSelect && onSelect(!selected)\n  }\n  \n  return (\n    <Box\n      ref={meshRef}\n      position={position}\n      args={[1, 1, 1]}\n      onClick={handleClick}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      <meshStandardMaterial \n        color={selected ? '#ff6b6b' : hovered ? '#4ecdc4' : color}\n        emissive={selected ? '#330000' : hovered ? '#001a1a' : '#000000'}\n      />\n    </Box>\n  )\n}\n\nfunction InteractiveSphere({ position, color, onSelect }) {\n  const meshRef = useRef()\n  const [hovered, setHovered] = useState(false)\n  const [selected, setSelected] = useState(false)\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2) * 0.2\n      \n      if (hovered || selected) {\n        meshRef.current.scale.setScalar(1.3)\n      } else {\n        meshRef.current.scale.setScalar(1)\n      }\n    }\n  })\n  \n  const handleClick = () => {\n    setSelected(!selected)\n    onSelect && onSelect(!selected)\n  }\n  \n  return (\n    <Sphere\n      ref={meshRef}\n      position={position}\n      args={[0.5, 32, 32]}\n      onClick={handleClick}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      <meshStandardMaterial \n        color={selected ? '#ff6b6b' : hovered ? '#4ecdc4' : color}\n        emissive={selected ? '#330000' : hovered ? '#001a1a' : '#000000'}\n        transparent\n        opacity={0.8}\n      />\n    </Sphere>\n  )\n}\n\n// VR Controller visualization\nfunction VRController({ position, rotation }) {\n  const groupRef = useRef()\n  \n  useFrame((state) => {\n    if (groupRef.current) {\n      groupRef.current.rotation.z = Math.sin(state.clock.elapsedTime) * 0.1\n    }\n  })\n  \n  return (\n    <group ref={groupRef} position={position} rotation={rotation}>\n      {/* Controller body */}\n      <Cylinder args={[0.02, 0.03, 0.15]} position={[0, 0, 0]}>\n        <meshStandardMaterial color=\"#333333\" />\n      </Cylinder>\n      \n      {/* Trigger */}\n      <Box args={[0.02, 0.01, 0.03]} position={[0, -0.02, 0.05]}>\n        <meshStandardMaterial color=\"#666666\" />\n      </Box>\n      \n      {/* Touchpad */}\n      <Cylinder args={[0.015, 0.015, 0.005]} position={[0, 0.02, 0.02]}>\n        <meshStandardMaterial color=\"#222222\" />\n      </Cylinder>\n      \n      {/* LED indicator */}\n      <Sphere args={[0.003]} position={[0, 0.03, 0.03]}>\n        <meshStandardMaterial color=\"#00ff00\" emissive=\"#00ff00\" emissiveIntensity={0.5} />\n      </Sphere>\n    </group>\n  )\n}\n\n// AR Marker simulation\nfunction ARMarker({ position }) {\n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.elapsedTime\n    }\n  })\n  \n  return (\n    <group position={position}>\n      {/* Marker base */}\n      <Box args={[0.1, 0.01, 0.1]} position={[0, 0, 0]}>\n        <meshStandardMaterial color=\"#ffffff\" />\n      </Box>\n      \n      {/* AR content */}\n      <group ref={meshRef} position={[0, 0.5, 0]}>\n        <Sphere args={[0.2]} position={[0, 0, 0]}>\n          <meshStandardMaterial \n            color=\"#ff6b6b\" \n            transparent \n            opacity={0.7}\n            emissive=\"#ff0000\"\n            emissiveIntensity={0.2}\n          />\n        </Sphere>\n        \n        <Text\n          position={[0, 0.4, 0]}\n          fontSize={0.1}\n          color=\"#ffffff\"\n          anchorX=\"center\"\n          anchorY=\"middle\"\n        >\n          AR Object\n        </Text>\n      </group>\n    </group>\n  )\n}\n\n// WebXR Manager Hook\nfunction useWebXR() {\n  const { gl } = useThree()\n  const [xrSupported, setXrSupported] = useState({\n    vr: false,\n    ar: false\n  })\n  const [xrSession, setXrSession] = useState(null)\n  \n  useEffect(() => {\n    if (navigator.xr) {\n      // Check VR support\n      navigator.xr.isSessionSupported('immersive-vr').then((supported) => {\n        setXrSupported(prev => ({ ...prev, vr: supported }))\n      }).catch(() => {\n        setXrSupported(prev => ({ ...prev, vr: false }))\n      })\n      \n      // Check AR support\n      navigator.xr.isSessionSupported('immersive-ar').then((supported) => {\n        setXrSupported(prev => ({ ...prev, ar: supported }))\n      }).catch(() => {\n        setXrSupported(prev => ({ ...prev, ar: false }))\n      })\n    }\n  }, [])\n  \n  const startVRSession = async () => {\n    if (navigator.xr && xrSupported.vr) {\n      try {\n        const session = await navigator.xr.requestSession('immersive-vr')\n        await gl.xr.setSession(session)\n        setXrSession(session)\n        \n        session.addEventListener('end', () => {\n          setXrSession(null)\n        })\n      } catch (error) {\n        console.error('Failed to start VR session:', error)\n      }\n    }\n  }\n  \n  const startARSession = async () => {\n    if (navigator.xr && xrSupported.ar) {\n      try {\n        const session = await navigator.xr.requestSession('immersive-ar', {\n          requiredFeatures: ['local-floor'],\n          optionalFeatures: ['hand-tracking', 'hit-test']\n        })\n        await gl.xr.setSession(session)\n        setXrSession(session)\n        \n        session.addEventListener('end', () => {\n          setXrSession(null)\n        })\n      } catch (error) {\n        console.error('Failed to start AR session:', error)\n      }\n    }\n  }\n  \n  const endSession = () => {\n    if (xrSession) {\n      xrSession.end()\n    }\n  }\n  \n  return {\n    xrSupported,\n    xrSession,\n    startVRSession,\n    startARSession,\n    endSession\n  }\n}\n\nfunction Scene() {\n  const {\n    showVRControllers,\n    showARMarkers,\n    interactionMode,\n    environmentType\n  } = useControls('XR设置', {\n    showVRControllers: { value: true, label: '显示VR控制器' },\n    showARMarkers: { value: true, label: '显示AR标记' },\n    interactionMode: {\n      value: 'gaze',\n      options: {\n        '凝视选择': 'gaze',\n        '手势控制': 'gesture',\n        '控制器': 'controller'\n      },\n      label: '交互模式'\n    },\n    environmentType: {\n      value: 'room',\n      options: {\n        '房间': 'room',\n        '户外': 'outdoor',\n        '太空': 'space'\n      },\n      label: '环境类型'\n    }\n  })\n  \n  const [selectedObjects, setSelectedObjects] = useState([])\n  \n  const handleObjectSelect = (index, selected) => {\n    if (selected) {\n      setSelectedObjects(prev => [...prev, index])\n    } else {\n      setSelectedObjects(prev => prev.filter(i => i !== index))\n    }\n  }\n  \n  return (\n    <>\n      {/* Environment setup */}\n      {environmentType === 'room' && (\n        <>\n          {/* Room walls */}\n          <Box args={[10, 0.1, 10]} position={[0, -2, 0]}>\n            <meshStandardMaterial color=\"#8B4513\" />\n          </Box>\n          <Box args={[0.1, 4, 10]} position={[-5, 0, 0]}>\n            <meshStandardMaterial color=\"#DEB887\" />\n          </Box>\n          <Box args={[0.1, 4, 10]} position={[5, 0, 0]}>\n            <meshStandardMaterial color=\"#DEB887\" />\n          </Box>\n          <Box args={[10, 4, 0.1]} position={[0, 0, -5]}>\n            <meshStandardMaterial color=\"#DEB887\" />\n          </Box>\n        </>\n      )}\n      \n      {environmentType === 'space' && (\n        <>\n          {/* Stars */}\n          {Array.from({ length: 100 }, (_, i) => (\n            <Sphere\n              key={i}\n              args={[0.01]}\n              position={[\n                (Math.random() - 0.5) * 50,\n                (Math.random() - 0.5) * 50,\n                (Math.random() - 0.5) * 50\n              ]}\n            >\n              <meshBasicMaterial color=\"#ffffff\" />\n            </Sphere>\n          ))}\n        </>\n      )}\n      \n      {/* Interactive objects */}\n      <InteractiveBox \n        position={[-2, 1, 0]} \n        color=\"#ff6b6b\"\n        onSelect={(selected) => handleObjectSelect(0, selected)}\n      />\n      <InteractiveBox \n        position={[0, 1, 0]} \n        color=\"#4ecdc4\"\n        onSelect={(selected) => handleObjectSelect(1, selected)}\n      />\n      <InteractiveBox \n        position={[2, 1, 0]} \n        color=\"#45b7d1\"\n        onSelect={(selected) => handleObjectSelect(2, selected)}\n      />\n      \n      <InteractiveSphere \n        position={[-1, 2.5, -2]} \n        color=\"#96ceb4\"\n        onSelect={(selected) => handleObjectSelect(3, selected)}\n      />\n      <InteractiveSphere \n        position={[1, 2.5, -2]} \n        color=\"#feca57\"\n        onSelect={(selected) => handleObjectSelect(4, selected)}\n      />\n      \n      {/* VR Controllers */}\n      {showVRControllers && (\n        <>\n          <VRController \n            position={[-0.3, 1.2, 0.5]} \n            rotation={[0, 0.2, 0]}\n          />\n          <VRController \n            position={[0.3, 1.2, 0.5]} \n            rotation={[0, -0.2, 0]}\n          />\n        </>\n      )}\n      \n      {/* AR Markers */}\n      {showARMarkers && (\n        <>\n          <ARMarker position={[-3, -1.9, -1]} />\n          <ARMarker position={[3, -1.9, -1]} />\n          <ARMarker position={[0, -1.9, -3]} />\n        </>\n      )}\n      \n      {/* Lighting */}\n      <ambientLight intensity={0.4} />\n      <directionalLight position={[10, 10, 5]} intensity={0.6} />\n      <pointLight position={[-10, -10, -10]} color=\"#ff0080\" intensity={0.3} />\n      <pointLight position={[10, -10, 10]} color=\"#0080ff\" intensity={0.3} />\n      \n      {/* Title */}\n      <Text\n        position={[0, 4, 0]}\n        fontSize={1}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        WebXR 体验\n      </Text>\n      \n      {/* Info */}\n      <Text\n        position={[0, 3.5, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        交互模式: {{\n          gaze: '凝视选择',\n          gesture: '手势控制',\n          controller: 'VR控制器'\n        }[interactionMode]}\n      </Text>\n      \n      <Text\n        position={[0, 3.2, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        已选择对象: {selectedObjects.length}\n      </Text>\n    </>\n  )\n}\n\n// WebXR Manager Component (inside Canvas)\nfunction WebXRManager({ onXRStateChange }) {\n  const { xrSupported, xrSession, startVRSession, startARSession, endSession } = useWebXR()\n  \n  useEffect(() => {\n    onXRStateChange({ xrSupported, xrSession, startVRSession, startARSession, endSession })\n  }, [xrSupported, xrSession, onXRStateChange])\n  \n  return null\n}\n\nfunction WebXRExperience() {\n  const [xrState, setXrState] = useState({\n    xrSupported: { vr: false, ar: false },\n    xrSession: null,\n    startVRSession: () => {},\n    startARSession: () => {},\n    endSession: () => {}\n  })\n  \n  const handleXRStateChange = useCallback((newState) => {\n    setXrState(newState)\n  }, [])\n  \n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          camera={{ position: [0, 2, 5], fov: 75 }}\n          gl={{ antialias: true }}\n          onCreated={({ gl }) => {\n            gl.xr.enabled = true\n          }}\n        >\n          <Suspense fallback={null}>\n            <WebXRManager onXRStateChange={handleXRStateChange} />\n            <Scene />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={2}\n              maxDistance={20}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          🥽 WebXR 体验\n        </InfoTitle>\n        \n        <InfoDescription>\n          WebXR是Web平台上的虚拟现实(VR)和增强现实(AR)标准，让用户可以直接在浏览器中体验沉浸式内容，无需安装额外应用。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>设备支持状态</h3>\n        \n        <StatusIndicator status={xrState.xrSupported.vr ? 'supported' : 'not-supported'}>\n          <div className=\"status-dot\"></div>\n          <span>VR支持: {xrState.xrSupported.vr ? '已支持' : '不支持'}</span>\n        </StatusIndicator>\n        \n        <StatusIndicator status={xrState.xrSupported.ar ? 'supported' : 'not-supported'}>\n          <div className=\"status-dot\"></div>\n          <span>AR支持: {xrState.xrSupported.ar ? '已支持' : '不支持'}</span>\n        </StatusIndicator>\n        \n        <StatusIndicator status={xrState.xrSession ? 'supported' : 'unknown'}>\n          <div className=\"status-dot\"></div>\n          <span>XR会话: {xrState.xrSession ? '活跃' : '未启动'}</span>\n        </StatusIndicator>\n        \n        <div style={{ marginTop: '1rem' }}>\n          {!xrState.xrSession ? (\n            <>\n              <XRButton \n                onClick={xrState.startVRSession}\n                disabled={!xrState.xrSupported.vr}\n              >\n                启动VR模式\n              </XRButton>\n              <XRButton \n                onClick={xrState.startARSession}\n                disabled={!xrState.xrSupported.ar}\n              >\n                启动AR模式\n              </XRButton>\n            </>\n          ) : (\n            <XRButton onClick={xrState.endSession}>\n              退出XR模式\n            </XRButton>\n          )}\n        </div>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>核心特性</h3>\n        <TechList>\n          <li><code>沉浸式体验</code> - 360度虚拟环境</li>\n          <li><code>空间追踪</code> - 6DOF头部和手部追踪</li>\n          <li><code>立体渲染</code> - 双眼视差效果</li>\n          <li><code>手势识别</code> - 自然手部交互</li>\n          <li><code>控制器支持</code> - VR控制器输入</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>交互方式</h3>\n        <TechList>\n          <li><code>凝视选择</code> - 通过视线方向选择对象</li>\n          <li><code>手势控制</code> - 手部动作识别</li>\n          <li><code>控制器</code> - VR控制器按键和触摸</li>\n          <li><code>语音命令</code> - 语音识别控制</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>AR功能</h3>\n        <TechList>\n          <li><code>平面检测</code> - 识别现实世界表面</li>\n          <li><code>光照估计</code> - 匹配真实环境光照</li>\n          <li><code>遮挡处理</code> - 虚拟对象被真实物体遮挡</li>\n          <li><code>锚点系统</code> - 虚拟内容固定在空间位置</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>性能优化</h3>\n        <InfoDescription>\n          • 保持90fps的高帧率<br/>\n          • 减少延迟防止晕动症<br/>\n          • 优化渲染管线<br/>\n          • 使用LOD和剔除技术<br/>\n          • 合理分配GPU资源\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// WebXR会话管理\nclass WebXRManager {\n  async startVRSession() {\n    if (!navigator.xr) {\n      throw new Error('WebXR not supported')\n    }\n    \n    const session = await navigator.xr.requestSession('immersive-vr', {\n      requiredFeatures: ['local-floor'],\n      optionalFeatures: ['hand-tracking', 'eye-tracking']\n    })\n    \n    // 设置渲染器\n    await renderer.xr.setSession(session)\n    \n    // 监听会话事件\n    session.addEventListener('end', this.onSessionEnd)\n    session.addEventListener('inputsourceschange', this.onInputChange)\n    \n    return session\n  }\n  \n  async startARSession() {\n    const session = await navigator.xr.requestSession('immersive-ar', {\n      requiredFeatures: ['local-floor'],\n      optionalFeatures: ['hit-test', 'dom-overlay', 'light-estimation']\n    })\n    \n    await renderer.xr.setSession(session)\n    return session\n  }\n}\n\n// XR控制器处理\nfunction handleXRControllers(session) {\n  const controllers = []\n  \n  for (let i = 0; i < 2; i++) {\n    const controller = renderer.xr.getController(i)\n    \n    controller.addEventListener('selectstart', (event) => {\n      console.log('Controller select start', i)\n    })\n    \n    controller.addEventListener('selectend', (event) => {\n      console.log('Controller select end', i)\n    })\n    \n    scene.add(controller)\n    controllers.push(controller)\n  }\n  \n  return controllers\n}\n\n// 手部追踪\nfunction setupHandTracking(session) {\n  const hand1 = renderer.xr.getHand(0)\n  const hand2 = renderer.xr.getHand(1)\n  \n  hand1.addEventListener('pinchstart', (event) => {\n    console.log('Pinch start on hand 0')\n  })\n  \n  hand1.addEventListener('pinchend', (event) => {\n    console.log('Pinch end on hand 0')\n  })\n  \n  scene.add(hand1)\n  scene.add(hand2)\n}\n\n// AR平面检测\nasync function setupARPlaneDetection(session) {\n  const referenceSpace = await session.requestReferenceSpace('local-floor')\n  \n  session.requestAnimationFrame(function onXRFrame(time, frame) {\n    const pose = frame.getViewerPose(referenceSpace)\n    \n    if (pose) {\n      // 检测平面\n      const hitTestResults = frame.getHitTestResults(hitTestSource)\n      \n      if (hitTestResults.length > 0) {\n        const hit = hitTestResults[0]\n        const hitPose = hit.getPose(referenceSpace)\n        \n        // 在检测到的平面上放置虚拟对象\n        placeVirtualObject(hitPose.transform.matrix)\n      }\n    }\n    \n    session.requestAnimationFrame(onXRFrame)\n  })\n}\n\n// 渲染循环\nfunction animate() {\n  renderer.setAnimationLoop((time, frame) => {\n    if (frame) {\n      // XR渲染\n      const referenceSpace = renderer.xr.getReferenceSpace()\n      const pose = frame.getViewerPose(referenceSpace)\n      \n      if (pose) {\n        // 更新相机位置\n        const views = pose.views\n        \n        for (const view of views) {\n          const viewport = session.renderState.baseLayer.getViewport(view)\n          renderer.setViewport(viewport.x, viewport.y, viewport.width, viewport.height)\n          \n          camera.matrix.fromArray(view.transform.inverse.matrix)\n          camera.projectionMatrix.fromArray(view.projectionMatrix)\n          camera.updateMatrixWorld(true)\n          \n          renderer.render(scene, camera)\n        }\n      }\n    } else {\n      // 普通渲染\n      renderer.render(scene, camera)\n    }\n  })\n}`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default WebXRExperience"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","XRButton","StatusIndicator","props","InteractiveBox","position","color","onSelect","meshRef","useRef","hovered","setHovered","useState","selected","setSelected","useFrame","state","handleClick","jsx","Box","InteractiveSphere","Sphere","VRController","rotation","groupRef","jsxs","Cylinder","ARMarker","Text","useWebXR","gl","useThree","xrSupported","setXrSupported","xrSession","setXrSession","useEffect","supported","prev","session","error","Scene","showVRControllers","showARMarkers","interactionMode","environmentType","useControls","selectedObjects","setSelectedObjects","handleObjectSelect","index","i","Fragment","_","WebXRManager","onXRStateChange","startVRSession","startARSession","endSession","WebXRExperience","xrState","setXrState","handleXRStateChange","useCallback","newState","Canvas","Suspense","OrbitControls"],"mappings":"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"}