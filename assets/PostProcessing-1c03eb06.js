import{r as M,R as re,b as ge,i as qe,u as ae,j as o,f as Ye,C as Qe,O as $e,E as Je,T as et}from"./react-three-vendor-8ce1f887.js";import{d as T,U as _,ai as y,aN as tt,aO as st,aP as it,ad as rt,a6 as F,aQ as xe,a9 as Ae,aR as Ie,aS as j,aT as h,R as ve,aU as Y,at as nt,F as at,aV as ot,X as Fe,S as Ee,C as lt,M as ut,p as ne,aW as $,D as J,h as N,aX as ct,aY as Ne,a0 as ze,aj as z,P as Oe,a8 as ht,q as ke,g as Le,aG as ft,aZ as ye,E as be,a_ as dt,N as vt,H as pt,e as mt,ax as gt}from"./three-vendor-1aa2ed72.js";import{u as xt}from"./leva.esm-b659d5ba.js";import{d as K}from"./style-vendor-f8a8899f.js";import{m as St}from"./animation-vendor-2dec0a74.js";/**
 * postprocessing v6.37.4 build Sat Jun 07 2025
 * https://github.com/pmndrs/postprocessing
 * Copyright 2015-2025 Raoul van RÃ¼schen
 * @license Zlib
 */var ce=1/1e3,Tt=1e3,Mt=class{constructor(){this.startTime=performance.now(),this.previousTime=0,this.currentTime=0,this._delta=0,this._elapsed=0,this._fixedDelta=1e3/60,this.timescale=1,this.useFixedDelta=!1,this._autoReset=!1}get autoReset(){return this._autoReset}set autoReset(e){typeof document<"u"&&document.hidden!==void 0&&(e?document.addEventListener("visibilitychange",this):document.removeEventListener("visibilitychange",this),this._autoReset=e)}get delta(){return this._delta*ce}get fixedDelta(){return this._fixedDelta*ce}set fixedDelta(e){this._fixedDelta=e*Tt}get elapsed(){return this._elapsed*ce}update(e){this.useFixedDelta?this._delta=this.fixedDelta:(this.previousTime=this.currentTime,this.currentTime=(e!==void 0?e:performance.now())-this.startTime,this._delta=this.currentTime-this.previousTime),this._delta*=this.timescale,this._elapsed+=this._delta}reset(){this._delta=0,this._elapsed=0,this.currentTime=performance.now()-this.startTime}getDelta(){return this.delta}getElapsed(){return this.elapsed}handleEvent(e){document.hidden||(this.currentTime=performance.now()-this.startTime)}dispose(){this.autoReset=!1}},Et=(()=>{const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]),s=new ft;return s.setAttribute("position",new ye(e,3)),s.setAttribute("uv",new ye(t,2)),s})(),R=class pe{static get fullscreenGeometry(){return Et}constructor(t="Pass",s=new Ee,i=new lt){this.name=t,this.renderer=null,this.scene=s,this.camera=i,this.screen=null,this.rtt=!0,this.needsSwap=!0,this.needsDepthTexture=!1,this.enabled=!0}get renderToScreen(){return!this.rtt}set renderToScreen(t){if(this.rtt===t){const s=this.fullscreenMaterial;s!==null&&(s.needsUpdate=!0),this.rtt=!t}}set mainScene(t){}set mainCamera(t){}setRenderer(t){this.renderer=t}isEnabled(){return this.enabled}setEnabled(t){this.enabled=t}get fullscreenMaterial(){return this.screen!==null?this.screen.material:null}set fullscreenMaterial(t){let s=this.screen;s!==null?s.material=t:(s=new ut(pe.fullscreenGeometry,t),s.frustumCulled=!1,this.scene===null&&(this.scene=new Ee),this.scene.add(s),this.screen=s)}getFullscreenMaterial(){return this.fullscreenMaterial}setFullscreenMaterial(t){this.fullscreenMaterial=t}getDepthTexture(){return null}setDepthTexture(t,s=j){}render(t,s,i,r,n){throw new Error("Render method not implemented!")}setSize(t,s){}initialize(t,s,i){}dispose(){for(const t of Object.keys(this)){const s=this[t];(s instanceof F||s instanceof Ne||s instanceof ze||s instanceof pe)&&this[t].dispose()}this.fullscreenMaterial!==null&&this.fullscreenMaterial.dispose()}},yt=class extends R{constructor(){super("ClearMaskPass",null,null),this.needsSwap=!1}render(e,t,s,i,r){const n=e.state.buffers.stencil;n.setLocked(!1),n.setTest(!1)}},bt=`#include <common>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
uniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;
#include <colorspace_fragment>
#include <dithering_fragment>
}`,Q="varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",He=class extends N{constructor(){super({name:"CopyMaterial",uniforms:{inputBuffer:new h(null),opacity:new h(1)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:bt,vertexShader:Q})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}getOpacity(e){return this.uniforms.opacity.value}setOpacity(e){this.uniforms.opacity.value=e}},Ct=class extends R{constructor(e,t=!0){super("CopyPass"),this.fullscreenMaterial=new He,this.needsSwap=!1,this.renderTarget=e,e===void 0&&(this.renderTarget=new F(1,1,{minFilter:ne,magFilter:ne,stencilBuffer:!1,depthBuffer:!1}),this.renderTarget.texture.name="CopyPass.Target"),this.autoResize=t}get resize(){return this.autoResize}set resize(e){this.autoResize=e}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}setAutoResizeEnabled(e){this.autoResize=e}render(e,t,s,i,r){this.fullscreenMaterial.inputBuffer=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){this.autoResize&&this.renderTarget.setSize(e,t)}initialize(e,t,s){s!==void 0&&(this.renderTarget.texture.type=s,s!==_?this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1":e!==null&&e.outputColorSpace===y&&(this.renderTarget.texture.colorSpace=y))}},Ce=new Fe,Ge=class extends R{constructor(e=!0,t=!0,s=!1){super("ClearPass",null,null),this.needsSwap=!1,this.color=e,this.depth=t,this.stencil=s,this.overrideClearColor=null,this.overrideClearAlpha=-1}setClearFlags(e,t,s){this.color=e,this.depth=t,this.stencil=s}getOverrideClearColor(){return this.overrideClearColor}setOverrideClearColor(e){this.overrideClearColor=e}getOverrideClearAlpha(){return this.overrideClearAlpha}setOverrideClearAlpha(e){this.overrideClearAlpha=e}render(e,t,s,i,r){const n=this.overrideClearColor,a=this.overrideClearAlpha,u=e.getClearAlpha(),l=n!==null,c=a>=0;l?(e.getClearColor(Ce),e.setClearColor(n,c?a:u)):c&&e.setClearAlpha(a),e.setRenderTarget(this.renderToScreen?null:t),e.clear(this.color,this.depth,this.stencil),l?e.setClearColor(Ce,u):c&&e.setClearAlpha(u)}},Bt=class extends R{constructor(e,t){super("MaskPass",e,t),this.needsSwap=!1,this.clearPass=new Ge(!1,!1,!0),this.inverse=!1}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get inverted(){return this.inverse}set inverted(e){this.inverse=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getClearPass(){return this.clearPass}isInverted(){return this.inverted}setInverted(e){this.inverted=e}render(e,t,s,i,r){const n=e.getContext(),a=e.state.buffers,u=this.scene,l=this.camera,c=this.clearPass,f=this.inverted?0:1,d=1-f;a.color.setMask(!1),a.depth.setMask(!1),a.color.setLocked(!0),a.depth.setLocked(!0),a.stencil.setTest(!0),a.stencil.setOp(n.REPLACE,n.REPLACE,n.REPLACE),a.stencil.setFunc(n.ALWAYS,f,4294967295),a.stencil.setClear(d),a.stencil.setLocked(!0),this.clearPass.enabled&&(this.renderToScreen?c.render(e,null):(c.render(e,t),c.render(e,s))),this.renderToScreen?(e.setRenderTarget(null),e.render(u,l)):(e.setRenderTarget(t),e.render(u,l),e.setRenderTarget(s),e.render(u,l)),a.color.setLocked(!1),a.depth.setLocked(!1),a.stencil.setLocked(!1),a.stencil.setFunc(n.EQUAL,1,4294967295),a.stencil.setOp(n.KEEP,n.KEEP,n.KEEP),a.stencil.setLocked(!0)}},Rt=class{constructor(t=null,{depthBuffer:s=!0,stencilBuffer:i=!1,multisampling:r=0,frameBufferType:n}={}){this.renderer=null,this.inputBuffer=this.createBuffer(s,i,n,r),this.outputBuffer=this.inputBuffer.clone(),this.copyPass=new Ct,this.depthTexture=null,this.passes=[],this.timer=new Mt,this.autoRenderToScreen=!0,this.setRenderer(t)}get multisampling(){return this.inputBuffer.samples||0}set multisampling(t){const s=this.inputBuffer,i=this.multisampling;i>0&&t>0?(this.inputBuffer.samples=t,this.outputBuffer.samples=t,this.inputBuffer.dispose(),this.outputBuffer.dispose()):i!==t&&(this.inputBuffer.dispose(),this.outputBuffer.dispose(),this.inputBuffer=this.createBuffer(s.depthBuffer,s.stencilBuffer,s.texture.type,t),this.inputBuffer.depthTexture=this.depthTexture,this.outputBuffer=this.inputBuffer.clone())}getTimer(){return this.timer}getRenderer(){return this.renderer}setRenderer(t){if(this.renderer=t,t!==null){const s=t.getSize(new T),i=t.getContext().getContextAttributes().alpha,r=this.inputBuffer.texture.type;r===_&&t.outputColorSpace===y&&(this.inputBuffer.texture.colorSpace=y,this.outputBuffer.texture.colorSpace=y,this.inputBuffer.dispose(),this.outputBuffer.dispose()),t.autoClear=!1,this.setSize(s.width,s.height);for(const n of this.passes)n.initialize(t,i,r)}}replaceRenderer(t,s=!0){const i=this.renderer,r=i.domElement.parentNode;return this.setRenderer(t),s&&r!==null&&(r.removeChild(i.domElement),r.appendChild(t.domElement)),i}createDepthTexture(){const t=this.depthTexture=new tt;return this.inputBuffer.depthTexture=t,this.inputBuffer.dispose(),this.inputBuffer.stencilBuffer?(t.format=st,t.type=it):t.type=rt,t}deleteDepthTexture(){if(this.depthTexture!==null){this.depthTexture.dispose(),this.depthTexture=null,this.inputBuffer.depthTexture=null,this.inputBuffer.dispose();for(const t of this.passes)t.setDepthTexture(null)}}createBuffer(t,s,i,r){const n=this.renderer,a=n===null?new T:n.getDrawingBufferSize(new T),u={minFilter:ne,magFilter:ne,stencilBuffer:s,depthBuffer:t,type:i},l=new F(a.width,a.height,u);return r>0&&(l.ignoreDepthForMultisampleCopy=!1,l.samples=r),i===_&&n!==null&&n.outputColorSpace===y&&(l.texture.colorSpace=y),l.texture.name="EffectComposer.Buffer",l.texture.generateMipmaps=!1,l}setMainScene(t){for(const s of this.passes)s.mainScene=t}setMainCamera(t){for(const s of this.passes)s.mainCamera=t}addPass(t,s){const i=this.passes,r=this.renderer,n=r.getDrawingBufferSize(new T),a=r.getContext().getContextAttributes().alpha,u=this.inputBuffer.texture.type;if(t.setRenderer(r),t.setSize(n.width,n.height),t.initialize(r,a,u),this.autoRenderToScreen&&(i.length>0&&(i[i.length-1].renderToScreen=!1),t.renderToScreen&&(this.autoRenderToScreen=!1)),s!==void 0?i.splice(s,0,t):i.push(t),this.autoRenderToScreen&&(i[i.length-1].renderToScreen=!0),t.needsDepthTexture||this.depthTexture!==null)if(this.depthTexture===null){const l=this.createDepthTexture();for(t of i)t.setDepthTexture(l)}else t.setDepthTexture(this.depthTexture)}removePass(t){const s=this.passes,i=s.indexOf(t);if(i!==-1&&s.splice(i,1).length>0){if(this.depthTexture!==null){const a=(l,c)=>l||c.needsDepthTexture;s.reduce(a,!1)||(t.getDepthTexture()===this.depthTexture&&t.setDepthTexture(null),this.deleteDepthTexture())}this.autoRenderToScreen&&i===s.length&&(t.renderToScreen=!1,s.length>0&&(s[s.length-1].renderToScreen=!0))}}removeAllPasses(){const t=this.passes;this.deleteDepthTexture(),t.length>0&&(this.autoRenderToScreen&&(t[t.length-1].renderToScreen=!1),this.passes=[])}render(t){const s=this.renderer,i=this.copyPass;let r=this.inputBuffer,n=this.outputBuffer,a=!1,u,l,c;t===void 0&&(this.timer.update(),t=this.timer.getDelta());for(const f of this.passes)f.enabled&&(f.render(s,r,n,t,a),f.needsSwap&&(a&&(i.renderToScreen=f.renderToScreen,u=s.getContext(),l=s.state.buffers.stencil,l.setFunc(u.NOTEQUAL,1,4294967295),i.render(s,r,n,t,a),l.setFunc(u.EQUAL,1,4294967295)),c=r,r=n,n=c),f instanceof Bt?a=!0:f instanceof yt&&(a=!1))}setSize(t,s,i){const r=this.renderer,n=r.getSize(new T);(t===void 0||s===void 0)&&(t=n.width,s=n.height),(n.width!==t||n.height!==s)&&r.setSize(t,s,i);const a=r.getDrawingBufferSize(new T);this.inputBuffer.setSize(a.width,a.height),this.outputBuffer.setSize(a.width,a.height);for(const u of this.passes)u.setSize(a.width,a.height)}reset(){this.dispose(),this.autoRenderToScreen=!0}dispose(){for(const t of this.passes)t.dispose();this.passes=[],this.inputBuffer!==null&&this.inputBuffer.dispose(),this.outputBuffer!==null&&this.outputBuffer.dispose(),this.deleteDepthTexture(),this.copyPass.dispose(),this.timer.dispose(),R.fullscreenGeometry.dispose()}},I={NONE:0,DEPTH:1,CONVOLUTION:2},g={FRAGMENT_HEAD:"FRAGMENT_HEAD",FRAGMENT_MAIN_UV:"FRAGMENT_MAIN_UV",FRAGMENT_MAIN_IMAGE:"FRAGMENT_MAIN_IMAGE",VERTEX_HEAD:"VERTEX_HEAD",VERTEX_MAIN_SUPPORT:"VERTEX_MAIN_SUPPORT"},Dt=class{constructor(){this.shaderParts=new Map([[g.FRAGMENT_HEAD,null],[g.FRAGMENT_MAIN_UV,null],[g.FRAGMENT_MAIN_IMAGE,null],[g.VERTEX_HEAD,null],[g.VERTEX_MAIN_SUPPORT,null]]),this.defines=new Map,this.uniforms=new Map,this.blendModes=new Map,this.extensions=new Set,this.attributes=I.NONE,this.varyings=new Set,this.uvTransformation=!1,this.readDepth=!1,this.colorSpace=Ae}},he=!1,Be=class{constructor(e=null){this.originalMaterials=new Map,this.material=null,this.materials=null,this.materialsBackSide=null,this.materialsDoubleSide=null,this.materialsFlatShaded=null,this.materialsFlatShadedBackSide=null,this.materialsFlatShadedDoubleSide=null,this.setMaterial(e),this.meshCount=0,this.replaceMaterial=t=>{if(t.isMesh){let s;if(t.material.flatShading)switch(t.material.side){case J:s=this.materialsFlatShadedDoubleSide;break;case $:s=this.materialsFlatShadedBackSide;break;default:s=this.materialsFlatShaded;break}else switch(t.material.side){case J:s=this.materialsDoubleSide;break;case $:s=this.materialsBackSide;break;default:s=this.materials;break}this.originalMaterials.set(t,t.material),t.isSkinnedMesh?t.material=s[2]:t.isInstancedMesh?t.material=s[1]:t.material=s[0],++this.meshCount}}}cloneMaterial(e){if(!(e instanceof N))return e.clone();const t=e.uniforms,s=new Map;for(const r in t){const n=t[r].value;n.isRenderTargetTexture&&(t[r].value=null,s.set(r,n))}const i=e.clone();for(const r of s)t[r[0]].value=r[1],i.uniforms[r[0]].value=r[1];return i}setMaterial(e){if(this.disposeMaterials(),this.material=e,e!==null){const t=this.materials=[this.cloneMaterial(e),this.cloneMaterial(e),this.cloneMaterial(e)];for(const s of t)s.uniforms=Object.assign({},e.uniforms),s.side=ct;t[2].skinning=!0,this.materialsBackSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.side=$,i}),this.materialsDoubleSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.side=J,i}),this.materialsFlatShaded=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i}),this.materialsFlatShadedBackSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i.side=$,i}),this.materialsFlatShadedDoubleSide=t.map(s=>{const i=this.cloneMaterial(s);return i.uniforms=Object.assign({},e.uniforms),i.flatShading=!0,i.side=J,i})}}render(e,t,s){const i=e.shadowMap.enabled;if(e.shadowMap.enabled=!1,he){const r=this.originalMaterials;this.meshCount=0,t.traverse(this.replaceMaterial),e.render(t,s);for(const n of r)n[0].material=n[1];this.meshCount!==r.size&&r.clear()}else{const r=t.overrideMaterial;t.overrideMaterial=this.material,e.render(t,s),t.overrideMaterial=r}e.shadowMap.enabled=i}disposeMaterials(){if(this.material!==null){const e=this.materials.concat(this.materialsBackSide).concat(this.materialsDoubleSide).concat(this.materialsFlatShaded).concat(this.materialsFlatShadedBackSide).concat(this.materialsFlatShadedDoubleSide);for(const t of e)t.dispose()}}dispose(){this.originalMaterials.clear(),this.disposeMaterials()}static get workaroundEnabled(){return he}static set workaroundEnabled(e){he=e}},H=-1,C=class extends xe{constructor(e,t=H,s=H,i=1){super(),this.resizable=e,this.baseSize=new T(1,1),this.preferredSize=new T(t,s),this.target=this.preferredSize,this.s=i,this.effectiveSize=new T,this.addEventListener("change",()=>this.updateEffectiveSize()),this.updateEffectiveSize()}updateEffectiveSize(){const e=this.baseSize,t=this.preferredSize,s=this.effectiveSize,i=this.scale;t.width!==H?s.width=t.width:t.height!==H?s.width=Math.round(t.height*(e.width/Math.max(e.height,1))):s.width=Math.round(e.width*i),t.height!==H?s.height=t.height:t.width!==H?s.height=Math.round(t.width/Math.max(e.width/Math.max(e.height,1),1)):s.height=Math.round(e.height*i)}get width(){return this.effectiveSize.width}set width(e){this.preferredWidth=e}get height(){return this.effectiveSize.height}set height(e){this.preferredHeight=e}getWidth(){return this.width}getHeight(){return this.height}get scale(){return this.s}set scale(e){this.s!==e&&(this.s=e,this.preferredSize.setScalar(H),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getScale(){return this.scale}setScale(e){this.scale=e}get baseWidth(){return this.baseSize.width}set baseWidth(e){this.baseSize.width!==e&&(this.baseSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseWidth(){return this.baseWidth}setBaseWidth(e){this.baseWidth=e}get baseHeight(){return this.baseSize.height}set baseHeight(e){this.baseSize.height!==e&&(this.baseSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getBaseHeight(){return this.baseHeight}setBaseHeight(e){this.baseHeight=e}setBaseSize(e,t){(this.baseSize.width!==e||this.baseSize.height!==t)&&(this.baseSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}get preferredWidth(){return this.preferredSize.width}set preferredWidth(e){this.preferredSize.width!==e&&(this.preferredSize.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredWidth(){return this.preferredWidth}setPreferredWidth(e){this.preferredWidth=e}get preferredHeight(){return this.preferredSize.height}set preferredHeight(e){this.preferredSize.height!==e&&(this.preferredSize.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}getPreferredHeight(){return this.preferredHeight}setPreferredHeight(e){this.preferredHeight=e}setPreferredSize(e,t){(this.preferredSize.width!==e||this.preferredSize.height!==t)&&(this.preferredSize.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height))}copy(e){this.s=e.scale,this.baseSize.set(e.baseWidth,e.baseHeight),this.preferredSize.set(e.preferredWidth,e.preferredHeight),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.baseSize.width,this.baseSize.height)}static get AUTO_SIZE(){return H}},v={SKIP:9,SET:30,ADD:0,ALPHA:1,AVERAGE:2,COLOR:3,COLOR_BURN:4,COLOR_DODGE:5,DARKEN:6,DIFFERENCE:7,DIVIDE:8,DST:9,EXCLUSION:10,HARD_LIGHT:11,HARD_MIX:12,HUE:13,INVERT:14,INVERT_RGB:15,LIGHTEN:16,LINEAR_BURN:17,LINEAR_DODGE:18,LINEAR_LIGHT:19,LUMINOSITY:20,MULTIPLY:21,NEGATION:22,NORMAL:23,OVERLAY:24,PIN_LIGHT:25,REFLECT:26,SATURATION:27,SCREEN:28,SOFT_LIGHT:29,SRC:30,SUBTRACT:31,VIVID_LIGHT:32},wt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y,opacity);}",Ut="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,min(y.a,opacity));}",_t="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y)*0.5,opacity);}",Pt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.rg,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",At="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(step(0.0,y)*(1.0-min(vec4(1.0),(1.0-x)/y)),vec4(1.0),step(1.0,x));return mix(x,z,opacity);}",It="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=step(0.0,x)*mix(min(vec4(1.0),x/max(1.0-y,1e-9)),vec4(1.0),step(1.0,y));return mix(x,z,opacity);}",Ft="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x,y),opacity);}",Nt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,abs(x-y),opacity);}",zt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x/max(y,1e-12),opacity);}",Ot="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,(x+y-2.0*x*y),opacity);}",kt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 a=min(x,1.0),b=min(y,1.0);vec4 z=mix(2.0*a*b,1.0-2.0*(1.0-a)*(1.0-b),step(0.5,y));return mix(x,z,opacity);}",Lt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,step(1.0,x+y),opacity);}",Ht="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.r,xHSL.gb));return vec4(mix(x.rgb,z,opacity),y.a);}",Gt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-y,opacity);}",jt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y*(1.0-x),opacity);}",Vt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x,y),opacity);}",Wt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(y+x-1.0,0.0,1.0),opacity);}",Kt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,min(x+y,1.0),opacity);}",Zt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,clamp(2.0*y+x-1.0,0.0,1.0),opacity);}",Xt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.rg,yHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",qt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x*y,opacity);}",Yt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,1.0-abs(1.0-x-y),opacity);}",Qt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,opacity);}",$t="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(2.0*y*x,1.0-2.0*(1.0-y)*(1.0-x),step(0.5,x));return mix(x,z,opacity);}",Jt="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 z=mix(mix(y2,x,step(0.5*x,y)),max(vec4(0.0),y2-1.0),step(x,(y2-1.0)));return mix(x,z,opacity);}",es="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(min(x*x/max(1.0-y,1e-12),1.0),y,step(1.0,y));return mix(x,z,opacity);}",ts="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.r,yHSL.g,xHSL.b));return vec4(mix(x.rgb,z,opacity),y.a);}",ss="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,x+y-min(x*y,1.0),opacity);}",is="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 y2=2.0*y;vec4 w=step(0.5,y);vec4 z=mix(x-(1.0-y2)*x*(1.0-x),mix(x+(y2-1.0)*(sqrt(x)-x),x+(y2-1.0)*x*((16.0*x-12.0)*x+3.0),w*(1.0-step(0.25,x))),w);return mix(x,z,opacity);}",rs="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y;}",ns="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,max(x+y-1.0,0.0),opacity);}",as="vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=mix(max(1.0-min((1.0-x)/(2.0*y),1.0),0.0),min(x/(2.0*(1.0-y)),1.0),step(0.5,y));return mix(x,z,opacity);}",os=new Map([[v.ADD,wt],[v.ALPHA,Ut],[v.AVERAGE,_t],[v.COLOR,Pt],[v.COLOR_BURN,At],[v.COLOR_DODGE,It],[v.DARKEN,Ft],[v.DIFFERENCE,Nt],[v.DIVIDE,zt],[v.DST,null],[v.EXCLUSION,Ot],[v.HARD_LIGHT,kt],[v.HARD_MIX,Lt],[v.HUE,Ht],[v.INVERT,Gt],[v.INVERT_RGB,jt],[v.LIGHTEN,Vt],[v.LINEAR_BURN,Wt],[v.LINEAR_DODGE,Kt],[v.LINEAR_LIGHT,Zt],[v.LUMINOSITY,Xt],[v.MULTIPLY,qt],[v.NEGATION,Yt],[v.NORMAL,Qt],[v.OVERLAY,$t],[v.PIN_LIGHT,Jt],[v.REFLECT,es],[v.SATURATION,ts],[v.SCREEN,ss],[v.SOFT_LIGHT,is],[v.SRC,rs],[v.SUBTRACT,ns],[v.VIVID_LIGHT,as]]),ls=class extends xe{constructor(e,t=1){super(),this._blendFunction=e,this.opacity=new h(t)}getOpacity(){return this.opacity.value}setOpacity(e){this.opacity.value=e}get blendFunction(){return this._blendFunction}set blendFunction(e){this._blendFunction=e,this.dispatchEvent({type:"change"})}getBlendFunction(){return this.blendFunction}setBlendFunction(e){this.blendFunction=e}getShaderCode(){return os.get(this.blendFunction)}},G=class extends xe{constructor(e,t,{attributes:s=I.NONE,blendFunction:i=v.NORMAL,defines:r=new Map,uniforms:n=new Map,extensions:a=null,vertexShader:u=null}={}){super(),this.name=e,this.renderer=null,this.attributes=s,this.fragmentShader=t,this.vertexShader=u,this.defines=r,this.uniforms=n,this.extensions=a,this.blendMode=new ls(i),this.blendMode.addEventListener("change",l=>this.setChanged()),this._inputColorSpace=Ae,this._outputColorSpace=Ie}get inputColorSpace(){return this._inputColorSpace}set inputColorSpace(e){this._inputColorSpace=e,this.setChanged()}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e,this.setChanged()}set mainScene(e){}set mainCamera(e){}getName(){return this.name}setRenderer(e){this.renderer=e}getDefines(){return this.defines}getUniforms(){return this.uniforms}getExtensions(){return this.extensions}getBlendMode(){return this.blendMode}getAttributes(){return this.attributes}setAttributes(e){this.attributes=e,this.setChanged()}getFragmentShader(){return this.fragmentShader}setFragmentShader(e){this.fragmentShader=e,this.setChanged()}getVertexShader(){return this.vertexShader}setVertexShader(e){this.vertexShader=e,this.setChanged()}setChanged(){this.dispatchEvent({type:"change"})}setDepthTexture(e,t=j){}update(e,t,s){}setSize(e,t){}initialize(e,t,s){}dispose(){for(const e of Object.keys(this)){const t=this[e];(t instanceof F||t instanceof Ne||t instanceof ze||t instanceof R)&&this[e].dispose()}}},oe={VERY_SMALL:0,SMALL:1,MEDIUM:2,LARGE:3,VERY_LARGE:4,HUGE:5},us=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;
#include <colorspace_fragment>
}`,cs="uniform vec4 texelSize;uniform float kernel;uniform float scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize.xy*vec2(kernel)+texelSize.zw)*scale;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}",hs=[new Float32Array([0,0]),new Float32Array([0,1,1]),new Float32Array([0,1,1,2]),new Float32Array([0,1,2,2,3]),new Float32Array([0,1,2,3,4,4,5]),new Float32Array([0,1,2,3,4,5,7,8,9,10])],fs=class extends N{constructor(e=new be){super({name:"KawaseBlurMaterial",uniforms:{inputBuffer:new h(null),texelSize:new h(new be),scale:new h(1),kernel:new h(0)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:us,vertexShader:cs}),this.setTexelSize(e.x,e.y),this.kernelSize=oe.MEDIUM}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.inputBuffer=e}get kernelSequence(){return hs[this.kernelSize]}get scale(){return this.uniforms.scale.value}set scale(e){this.uniforms.scale.value=e}getScale(){return this.uniforms.scale.value}setScale(e){this.uniforms.scale.value=e}getKernel(){return null}get kernel(){return this.uniforms.kernel.value}set kernel(e){this.uniforms.kernel.value=e}setKernel(e){this.kernel=e}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t,e*.5,t*.5)}setSize(e,t){const s=1/e,i=1/t;this.uniforms.texelSize.value.set(s,i,s*.5,i*.5)}},je=class extends R{constructor({kernelSize:e=oe.MEDIUM,resolutionScale:t=.5,width:s=C.AUTO_SIZE,height:i=C.AUTO_SIZE,resolutionX:r=s,resolutionY:n=i}={}){super("KawaseBlurPass"),this.renderTargetA=new F(1,1,{depthBuffer:!1}),this.renderTargetA.texture.name="Blur.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="Blur.Target.B";const a=this.resolution=new C(this,r,n,t);a.addEventListener("change",u=>this.setSize(a.baseWidth,a.baseHeight)),this._blurMaterial=new fs,this._blurMaterial.kernelSize=e,this.copyMaterial=new He}getResolution(){return this.resolution}get blurMaterial(){return this._blurMaterial}set blurMaterial(e){this._blurMaterial=e}get dithering(){return this.copyMaterial.dithering}set dithering(e){this.copyMaterial.dithering=e}get kernelSize(){return this.blurMaterial.kernelSize}set kernelSize(e){this.blurMaterial.kernelSize=e}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get scale(){return this.blurMaterial.scale}set scale(e){this.blurMaterial.scale=e}getScale(){return this.blurMaterial.scale}setScale(e){this.blurMaterial.scale=e}getKernelSize(){return this.kernelSize}setKernelSize(e){this.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,s,i,r){const n=this.scene,a=this.camera,u=this.renderTargetA,l=this.renderTargetB,c=this.blurMaterial,f=c.kernelSequence;let d=t;this.fullscreenMaterial=c;for(let x=0,p=f.length;x<p;++x){const b=x&1?l:u;c.kernel=f[x],c.inputBuffer=d.texture,e.setRenderTarget(b),e.render(n,a),d=b}this.fullscreenMaterial=this.copyMaterial,this.copyMaterial.inputBuffer=d.texture,e.setRenderTarget(this.renderToScreen?null:s),e.render(n,a)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t);const i=s.width,r=s.height;this.renderTargetA.setSize(i,r),this.renderTargetB.setSize(i,r),this.blurMaterial.setSize(e,t)}initialize(e,t,s){s!==void 0&&(this.renderTargetA.texture.type=s,this.renderTargetB.texture.type=s,s!==_?(this.blurMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1",this.copyMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1"):e!==null&&e.outputColorSpace===y&&(this.renderTargetA.texture.colorSpace=y,this.renderTargetB.texture.colorSpace=y))}static get AUTO_SIZE(){return C.AUTO_SIZE}},ds=`#include <common>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#ifdef RANGE
uniform vec2 range;
#elif defined(THRESHOLD)
uniform float threshold;uniform float smoothing;
#endif
varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);float l=luminance(texel.rgb);
#ifdef RANGE
float low=step(range.x,l);float high=step(l,range.y);l*=low*high;
#elif defined(THRESHOLD)
l=smoothstep(threshold,threshold+smoothing,l)*l;
#endif
#ifdef COLOR
gl_FragColor=vec4(texel.rgb*clamp(l,0.0,1.0),l);
#else
gl_FragColor=vec4(l);
#endif
}`,vs=class extends N{constructor(e=!1,t=null){super({name:"LuminanceMaterial",defines:{THREE_REVISION:Le.replace(/\D+/g,"")},uniforms:{inputBuffer:new h(null),threshold:new h(0),smoothing:new h(1),range:new h(null)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:ds,vertexShader:Q}),this.colorOutput=e,this.luminanceRange=t}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get threshold(){return this.uniforms.threshold.value}set threshold(e){this.smoothing>0||e>0?this.defines.THRESHOLD="1":delete this.defines.THRESHOLD,this.uniforms.threshold.value=e}getThreshold(){return this.threshold}setThreshold(e){this.threshold=e}get smoothing(){return this.uniforms.smoothing.value}set smoothing(e){this.threshold>0||e>0?this.defines.THRESHOLD="1":delete this.defines.THRESHOLD,this.uniforms.smoothing.value=e}getSmoothingFactor(){return this.smoothing}setSmoothingFactor(e){this.smoothing=e}get useThreshold(){return this.threshold>0||this.smoothing>0}set useThreshold(e){}get colorOutput(){return this.defines.COLOR!==void 0}set colorOutput(e){e?this.defines.COLOR="1":delete this.defines.COLOR,this.needsUpdate=!0}isColorOutputEnabled(e){return this.colorOutput}setColorOutputEnabled(e){this.colorOutput=e}get useRange(){return this.luminanceRange!==null}set useRange(e){this.luminanceRange=null}get luminanceRange(){return this.uniforms.range.value}set luminanceRange(e){e!==null?this.defines.RANGE="1":delete this.defines.RANGE,this.uniforms.range.value=e,this.needsUpdate=!0}getLuminanceRange(){return this.luminanceRange}setLuminanceRange(e){this.luminanceRange=e}},ps=class extends R{constructor({renderTarget:e,luminanceRange:t,colorOutput:s,resolutionScale:i=1,width:r=C.AUTO_SIZE,height:n=C.AUTO_SIZE,resolutionX:a=r,resolutionY:u=n}={}){super("LuminancePass"),this.fullscreenMaterial=new vs(s,t),this.needsSwap=!1,this.renderTarget=e,this.renderTarget===void 0&&(this.renderTarget=new F(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="LuminancePass.Target");const l=this.resolution=new C(this,a,u,i);l.addEventListener("change",c=>this.setSize(l.baseWidth,l.baseHeight))}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}getResolution(){return this.resolution}render(e,t,s,i,r){const n=this.fullscreenMaterial;n.inputBuffer=t.texture,e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t),this.renderTarget.setSize(s.width,s.height)}initialize(e,t,s){s!==void 0&&s!==_&&(this.renderTarget.texture.type=s,this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}},ms=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#define WEIGHT_INNER 0.125
#define WEIGHT_OUTER 0.0555555
varying vec2 vUv;varying vec2 vUv00;varying vec2 vUv01;varying vec2 vUv02;varying vec2 vUv03;varying vec2 vUv04;varying vec2 vUv05;varying vec2 vUv06;varying vec2 vUv07;varying vec2 vUv08;varying vec2 vUv09;varying vec2 vUv10;varying vec2 vUv11;float clampToBorder(const in vec2 uv){return float(uv.s>=0.0&&uv.s<=1.0&&uv.t>=0.0&&uv.t<=1.0);}void main(){vec4 c=vec4(0.0);vec4 w=WEIGHT_INNER*vec4(clampToBorder(vUv00),clampToBorder(vUv01),clampToBorder(vUv02),clampToBorder(vUv03));c+=w.x*texture2D(inputBuffer,vUv00);c+=w.y*texture2D(inputBuffer,vUv01);c+=w.z*texture2D(inputBuffer,vUv02);c+=w.w*texture2D(inputBuffer,vUv03);w=WEIGHT_OUTER*vec4(clampToBorder(vUv04),clampToBorder(vUv05),clampToBorder(vUv06),clampToBorder(vUv07));c+=w.x*texture2D(inputBuffer,vUv04);c+=w.y*texture2D(inputBuffer,vUv05);c+=w.z*texture2D(inputBuffer,vUv06);c+=w.w*texture2D(inputBuffer,vUv07);w=WEIGHT_OUTER*vec4(clampToBorder(vUv08),clampToBorder(vUv09),clampToBorder(vUv10),clampToBorder(vUv11));c+=w.x*texture2D(inputBuffer,vUv08);c+=w.y*texture2D(inputBuffer,vUv09);c+=w.z*texture2D(inputBuffer,vUv10);c+=w.w*texture2D(inputBuffer,vUv11);c+=WEIGHT_OUTER*texture2D(inputBuffer,vUv);gl_FragColor=c;
#include <colorspace_fragment>
}`,gs="uniform vec2 texelSize;varying vec2 vUv;varying vec2 vUv00;varying vec2 vUv01;varying vec2 vUv02;varying vec2 vUv03;varying vec2 vUv04;varying vec2 vUv05;varying vec2 vUv06;varying vec2 vUv07;varying vec2 vUv08;varying vec2 vUv09;varying vec2 vUv10;varying vec2 vUv11;void main(){vUv=position.xy*0.5+0.5;vUv00=vUv+texelSize*vec2(-1.0,1.0);vUv01=vUv+texelSize*vec2(1.0,1.0);vUv02=vUv+texelSize*vec2(-1.0,-1.0);vUv03=vUv+texelSize*vec2(1.0,-1.0);vUv04=vUv+texelSize*vec2(-2.0,2.0);vUv05=vUv+texelSize*vec2(0.0,2.0);vUv06=vUv+texelSize*vec2(2.0,2.0);vUv07=vUv+texelSize*vec2(-2.0,0.0);vUv08=vUv+texelSize*vec2(2.0,0.0);vUv09=vUv+texelSize*vec2(-2.0,-2.0);vUv10=vUv+texelSize*vec2(0.0,-2.0);vUv11=vUv+texelSize*vec2(2.0,-2.0);gl_Position=vec4(position.xy,1.0,1.0);}",xs=class extends N{constructor(){super({name:"DownsamplingMaterial",uniforms:{inputBuffer:new h(null),texelSize:new h(new T)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:ms,vertexShader:gs})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}},Ss=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;uniform mediump sampler2D supportBuffer;
#else
uniform lowp sampler2D inputBuffer;uniform lowp sampler2D supportBuffer;
#endif
uniform float radius;varying vec2 vUv;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;varying vec2 vUv4;varying vec2 vUv5;varying vec2 vUv6;varying vec2 vUv7;void main(){vec4 c=vec4(0.0);c+=texture2D(inputBuffer,vUv0)*0.0625;c+=texture2D(inputBuffer,vUv1)*0.125;c+=texture2D(inputBuffer,vUv2)*0.0625;c+=texture2D(inputBuffer,vUv3)*0.125;c+=texture2D(inputBuffer,vUv)*0.25;c+=texture2D(inputBuffer,vUv4)*0.125;c+=texture2D(inputBuffer,vUv5)*0.0625;c+=texture2D(inputBuffer,vUv6)*0.125;c+=texture2D(inputBuffer,vUv7)*0.0625;vec4 baseColor=texture2D(supportBuffer,vUv);gl_FragColor=mix(baseColor,c,radius);
#include <colorspace_fragment>
}`,Ts="uniform vec2 texelSize;varying vec2 vUv;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;varying vec2 vUv4;varying vec2 vUv5;varying vec2 vUv6;varying vec2 vUv7;void main(){vUv=position.xy*0.5+0.5;vUv0=vUv+texelSize*vec2(-1.0,1.0);vUv1=vUv+texelSize*vec2(0.0,1.0);vUv2=vUv+texelSize*vec2(1.0,1.0);vUv3=vUv+texelSize*vec2(-1.0,0.0);vUv4=vUv+texelSize*vec2(1.0,0.0);vUv5=vUv+texelSize*vec2(-1.0,-1.0);vUv6=vUv+texelSize*vec2(0.0,-1.0);vUv7=vUv+texelSize*vec2(1.0,-1.0);gl_Position=vec4(position.xy,1.0,1.0);}",Ms=class extends N{constructor(){super({name:"UpsamplingMaterial",uniforms:{inputBuffer:new h(null),supportBuffer:new h(null),texelSize:new h(new T),radius:new h(.85)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Ss,vertexShader:Ts})}set inputBuffer(e){this.uniforms.inputBuffer.value=e}set supportBuffer(e){this.uniforms.supportBuffer.value=e}get radius(){return this.uniforms.radius.value}set radius(e){this.uniforms.radius.value=e}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}},Es=class extends R{constructor(){super("MipmapBlurPass"),this.needsSwap=!1,this.renderTarget=new F(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="Upsampling.Mipmap0",this.downsamplingMipmaps=[],this.upsamplingMipmaps=[],this.downsamplingMaterial=new xs,this.upsamplingMaterial=new Ms,this.resolution=new T}get texture(){return this.renderTarget.texture}get levels(){return this.downsamplingMipmaps.length}set levels(e){if(this.levels!==e){const t=this.renderTarget;this.dispose(),this.downsamplingMipmaps=[],this.upsamplingMipmaps=[];for(let s=0;s<e;++s){const i=t.clone();i.texture.name="Downsampling.Mipmap"+s,this.downsamplingMipmaps.push(i)}this.upsamplingMipmaps.push(t);for(let s=1,i=e-1;s<i;++s){const r=t.clone();r.texture.name="Upsampling.Mipmap"+s,this.upsamplingMipmaps.push(r)}this.setSize(this.resolution.x,this.resolution.y)}}get radius(){return this.upsamplingMaterial.radius}set radius(e){this.upsamplingMaterial.radius=e}render(e,t,s,i,r){const{scene:n,camera:a}=this,{downsamplingMaterial:u,upsamplingMaterial:l}=this,{downsamplingMipmaps:c,upsamplingMipmaps:f}=this;let d=t;this.fullscreenMaterial=u;for(let x=0,p=c.length;x<p;++x){const b=c[x];u.setSize(d.width,d.height),u.inputBuffer=d.texture,e.setRenderTarget(b),e.render(n,a),d=b}this.fullscreenMaterial=l;for(let x=f.length-1;x>=0;--x){const p=f[x];l.setSize(d.width,d.height),l.inputBuffer=d.texture,l.supportBuffer=c[x].texture,e.setRenderTarget(p),e.render(n,a),d=p}}setSize(e,t){const s=this.resolution;s.set(e,t);let i=s.width,r=s.height;for(let n=0,a=this.downsamplingMipmaps.length;n<a;++n)i=Math.round(i*.5),r=Math.round(r*.5),this.downsamplingMipmaps[n].setSize(i,r),n<this.upsamplingMipmaps.length&&this.upsamplingMipmaps[n].setSize(i,r)}initialize(e,t,s){if(s!==void 0){const i=this.downsamplingMipmaps.concat(this.upsamplingMipmaps);for(const r of i)r.texture.type=s;if(s!==_)this.downsamplingMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1",this.upsamplingMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1";else if(e!==null&&e.outputColorSpace===y)for(const r of i)r.texture.colorSpace=y}}dispose(){super.dispose();for(const e of this.downsamplingMipmaps.concat(this.upsamplingMipmaps))e.dispose()}},ys=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D map;
#else
uniform lowp sampler2D map;
#endif
uniform float intensity;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec4 texel=texture2D(map,uv);outputColor=vec4(texel.rgb*intensity,texel.a);}`,bs=class extends G{constructor({blendFunction:e=v.SCREEN,luminanceThreshold:t=.9,luminanceSmoothing:s=.025,mipmapBlur:i=!1,intensity:r=1,radius:n=.85,levels:a=8,kernelSize:u=oe.LARGE,resolutionScale:l=.5,width:c=C.AUTO_SIZE,height:f=C.AUTO_SIZE,resolutionX:d=c,resolutionY:x=f}={}){super("BloomEffect",ys,{blendFunction:e,uniforms:new Map([["map",new h(null)],["intensity",new h(r)]])}),this.renderTarget=new F(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="Bloom.Target",this.blurPass=new je({kernelSize:u}),this.luminancePass=new ps({colorOutput:!0}),this.luminanceMaterial.threshold=t,this.luminanceMaterial.smoothing=s,this.mipmapBlurPass=new Es,this.mipmapBlurPass.enabled=i,this.mipmapBlurPass.radius=n,this.mipmapBlurPass.levels=a,this.uniforms.get("map").value=i?this.mipmapBlurPass.texture:this.renderTarget.texture;const p=this.resolution=new C(this,d,x,l);p.addEventListener("change",b=>this.setSize(p.baseWidth,p.baseHeight))}get texture(){return this.mipmapBlurPass.enabled?this.mipmapBlurPass.texture:this.renderTarget.texture}getTexture(){return this.texture}getResolution(){return this.resolution}getBlurPass(){return this.blurPass}getLuminancePass(){return this.luminancePass}get luminanceMaterial(){return this.luminancePass.fullscreenMaterial}getLuminanceMaterial(){return this.luminancePass.fullscreenMaterial}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get dithering(){return this.blurPass.dithering}set dithering(e){this.blurPass.dithering=e}get kernelSize(){return this.blurPass.kernelSize}set kernelSize(e){this.blurPass.kernelSize=e}get distinction(){return console.warn(this.name,"distinction was removed"),1}set distinction(e){console.warn(this.name,"distinction was removed")}get intensity(){return this.uniforms.get("intensity").value}set intensity(e){this.uniforms.get("intensity").value=e}getIntensity(){return this.intensity}setIntensity(e){this.intensity=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}update(e,t,s){const i=this.renderTarget,r=this.luminancePass;r.enabled?(r.render(e,t),this.mipmapBlurPass.enabled?this.mipmapBlurPass.render(e,r.renderTarget):this.blurPass.render(e,r.renderTarget,i)):this.mipmapBlurPass.enabled?this.mipmapBlurPass.render(e,t):this.blurPass.render(e,t,i)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t),this.renderTarget.setSize(s.width,s.height),this.blurPass.resolution.copy(s),this.luminancePass.setSize(e,t),this.mipmapBlurPass.setSize(e,t)}initialize(e,t,s){this.blurPass.initialize(e,t,s),this.luminancePass.initialize(e,t,s),this.mipmapBlurPass.initialize(e,t,s),s!==void 0&&(this.renderTarget.texture.type=s,e!==null&&e.outputColorSpace===y&&(this.renderTarget.texture.colorSpace=y))}},Cs=`#ifdef RADIAL_MODULATION
uniform float modulationOffset;
#endif
varying float vActive;varying vec2 vUvR;varying vec2 vUvB;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec2 ra=inputColor.ra;vec2 ba=inputColor.ba;
#ifdef RADIAL_MODULATION
const vec2 center=vec2(0.5);float d=distance(uv,center)*2.0;d=max(d-modulationOffset,0.0);if(vActive>0.0&&d>0.0){ra=texture2D(inputBuffer,mix(uv,vUvR,d)).ra;ba=texture2D(inputBuffer,mix(uv,vUvB,d)).ba;}
#else
if(vActive>0.0){ra=texture2D(inputBuffer,vUvR).ra;ba=texture2D(inputBuffer,vUvB).ba;}
#endif
outputColor=vec4(ra.x,inputColor.g,ba.x,max(max(ra.y,ba.y),inputColor.a));}`,Bs="uniform vec2 offset;varying float vActive;varying vec2 vUvR;varying vec2 vUvB;void mainSupport(const in vec2 uv){vec2 shift=offset*vec2(1.0,aspect);vActive=(shift.x!=0.0||shift.y!=0.0)?1.0:0.0;vUvR=uv+shift;vUvB=uv-shift;}",Rs=class extends G{constructor({offset:e=new T(.001,5e-4),radialModulation:t=!1,modulationOffset:s=.15}={}){super("ChromaticAberrationEffect",Cs,{vertexShader:Bs,attributes:I.CONVOLUTION,uniforms:new Map([["offset",new h(e)],["modulationOffset",new h(s)]])}),this.radialModulation=t}get offset(){return this.uniforms.get("offset").value}set offset(e){this.uniforms.get("offset").value=e}get radialModulation(){return this.defines.has("RADIAL_MODULATION")}set radialModulation(e){e?this.defines.set("RADIAL_MODULATION","1"):this.defines.delete("RADIAL_MODULATION"),this.setChanged()}get modulationOffset(){return this.uniforms.get("modulationOffset").value}set modulationOffset(e){this.uniforms.get("modulationOffset").value=e}getOffset(){return this.offset}setOffset(e){this.offset=e}},Ve={RED:0,GREEN:1,BLUE:2,ALPHA:3},Se={DISCARD:0,MULTIPLY:1,MULTIPLY_RGB_SET_ALPHA:2,MULTIPLY_RGB:3},Ds=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#if PASS == 1
uniform vec4 kernel64[32];
#else
uniform vec4 kernel16[8];
#endif
uniform lowp sampler2D cocBuffer;uniform vec2 texelSize;uniform float scale;varying vec2 vUv;void main(){
#ifdef FOREGROUND
vec2 cocNearFar=texture2D(cocBuffer,vUv).rg*scale;float coc=cocNearFar.x;
#else
float coc=texture2D(cocBuffer,vUv).g*scale;
#endif
if(coc==0.0){gl_FragColor=texture2D(inputBuffer,vUv);}else{
#ifdef FOREGROUND
vec2 step=texelSize*max(cocNearFar.x,cocNearFar.y);
#else
vec2 step=texelSize*coc;
#endif
#if PASS == 1
vec4 acc=vec4(0.0);for(int i=0;i<32;++i){vec4 kernel=kernel64[i];vec2 uv=step*kernel.xy+vUv;acc+=texture2D(inputBuffer,uv);uv=step*kernel.zw+vUv;acc+=texture2D(inputBuffer,uv);}gl_FragColor=acc/64.0;
#else
vec4 maxValue=texture2D(inputBuffer,vUv);for(int i=0;i<8;++i){vec4 kernel=kernel16[i];vec2 uv=step*kernel.xy+vUv;maxValue=max(texture2D(inputBuffer,uv),maxValue);uv=step*kernel.zw+vUv;maxValue=max(texture2D(inputBuffer,uv),maxValue);}gl_FragColor=maxValue;
#endif
}}`,ee=class extends N{constructor(e=!1,t=!1){super({name:"BokehMaterial",defines:{PASS:e?"2":"1"},uniforms:{inputBuffer:new h(null),cocBuffer:new h(null),texelSize:new h(new T),kernel64:new h(null),kernel16:new h(null),scale:new h(1)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Ds,vertexShader:Q}),t&&(this.defines.FOREGROUND="1"),this.generateKernel()}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}set cocBuffer(e){this.uniforms.cocBuffer.value=e}setCoCBuffer(e){this.uniforms.cocBuffer.value=e}get scale(){return this.uniforms.scale.value}set scale(e){this.uniforms.scale.value=e}getScale(e){return this.scale}setScale(e){this.scale=e}generateKernel(){const e=2.39996323,t=new Float64Array(128),s=new Float64Array(32);let i=0,r=0;for(let n=0,a=Math.sqrt(80);n<80;++n){const u=n*e,l=Math.sqrt(n)/a,c=l*Math.cos(u),f=l*Math.sin(u);n%5===0?(s[r++]=c,s[r++]=f):(t[i++]=c,t[i++]=f)}this.uniforms.kernel64.value=t,this.uniforms.kernel16.value=s}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t)}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}};function Re(e,t,s){return e*(t-s)-t}function me(e,t,s){return Math.min(Math.max((e+t)/(t-s),0),1)}var ws=`#include <common>
#include <packing>
#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
uniform float focusDistance;uniform float focusRange;uniform float cameraNear;uniform float cameraFar;varying vec2 vUv;float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
float depth=unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
float depth=texture2D(depthBuffer,uv).r;
#endif
#ifdef LOG_DEPTH
float d=pow(2.0,depth*log2(cameraFar+1.0))-1.0;float a=cameraFar/(cameraFar-cameraNear);float b=cameraFar*cameraNear/(cameraNear-cameraFar);depth=a+b/d;
#endif
return depth;}void main(){float depth=readDepth(vUv);
#ifdef PERSPECTIVE_CAMERA
float viewZ=perspectiveDepthToViewZ(depth,cameraNear,cameraFar);float linearDepth=viewZToOrthographicDepth(viewZ,cameraNear,cameraFar);
#else
float linearDepth=depth;
#endif
float signedDistance=linearDepth-focusDistance;float magnitude=smoothstep(0.0,focusRange,abs(signedDistance));gl_FragColor.rg=magnitude*vec2(step(signedDistance,0.0),step(0.0,signedDistance));}`,Us=class extends N{constructor(e){super({name:"CircleOfConfusionMaterial",defines:{DEPTH_PACKING:"0"},uniforms:{depthBuffer:new h(null),focusDistance:new h(0),focusRange:new h(0),cameraNear:new h(.3),cameraFar:new h(1e3)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:ws,vertexShader:Q}),this.uniforms.focalLength=this.uniforms.focusRange,this.copyCameraSettings(e)}get near(){return this.uniforms.cameraNear.value}get far(){return this.uniforms.cameraFar.value}set depthBuffer(e){this.uniforms.depthBuffer.value=e}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer(e,t=j){this.depthBuffer=e,this.depthPacking=t}get focusDistance(){return this.uniforms.focusDistance.value}set focusDistance(e){this.uniforms.focusDistance.value=e}get worldFocusDistance(){return-Re(this.focusDistance,this.near,this.far)}set worldFocusDistance(e){this.focusDistance=me(-e,this.near,this.far)}getFocusDistance(e){this.uniforms.focusDistance.value=e}setFocusDistance(e){this.uniforms.focusDistance.value=e}get focalLength(){return this.focusRange}set focalLength(e){this.focusRange=e}get focusRange(){return this.uniforms.focusRange.value}set focusRange(e){this.uniforms.focusRange.value=e}get worldFocusRange(){return-Re(this.focusRange,this.near,this.far)}set worldFocusRange(e){this.focusRange=me(-e,this.near,this.far)}getFocalLength(e){return this.focusRange}setFocalLength(e){this.focusRange=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNear.value=e.near,this.uniforms.cameraFar.value=e.far,e instanceof Oe?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}},_s=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#ifdef MASK_PRECISION_HIGH
uniform mediump sampler2D maskTexture;
#else
uniform lowp sampler2D maskTexture;
#endif
#if MASK_FUNCTION != 0
uniform float strength;
#endif
varying vec2 vUv;void main(){
#if COLOR_CHANNEL == 0
float mask=texture2D(maskTexture,vUv).r;
#elif COLOR_CHANNEL == 1
float mask=texture2D(maskTexture,vUv).g;
#elif COLOR_CHANNEL == 2
float mask=texture2D(maskTexture,vUv).b;
#else
float mask=texture2D(maskTexture,vUv).a;
#endif
#if MASK_FUNCTION == 0
#ifdef INVERTED
mask=step(mask,0.0);
#else
mask=1.0-step(mask,0.0);
#endif
#else
mask=clamp(mask*strength,0.0,1.0);
#ifdef INVERTED
mask=1.0-mask;
#endif
#endif
#if MASK_FUNCTION == 3
vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=vec4(mask*texel.rgb,texel.a);
#elif MASK_FUNCTION == 2
gl_FragColor=vec4(mask*texture2D(inputBuffer,vUv).rgb,mask);
#else
gl_FragColor=mask*texture2D(inputBuffer,vUv);
#endif
}`,Ps=class extends N{constructor(e=null){super({name:"MaskMaterial",uniforms:{maskTexture:new h(e),inputBuffer:new h(null),strength:new h(1)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:_s,vertexShader:Q}),this.colorChannel=Ve.RED,this.maskFunction=Se.DISCARD}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}set maskTexture(e){this.uniforms.maskTexture.value=e,delete this.defines.MASK_PRECISION_HIGH,e.type!==_&&(this.defines.MASK_PRECISION_HIGH="1"),this.needsUpdate=!0}setMaskTexture(e){this.maskTexture=e}set colorChannel(e){this.defines.COLOR_CHANNEL=e.toFixed(0),this.needsUpdate=!0}setColorChannel(e){this.colorChannel=e}set maskFunction(e){this.defines.MASK_FUNCTION=e.toFixed(0),this.needsUpdate=!0}setMaskFunction(e){this.maskFunction=e}get inverted(){return this.defines.INVERTED!==void 0}set inverted(e){this.inverted&&!e?delete this.defines.INVERTED:e&&(this.defines.INVERTED="1"),this.needsUpdate=!0}isInverted(){return this.inverted}setInverted(e){this.inverted=e}get strength(){return this.uniforms.strength.value}set strength(e){this.uniforms.strength.value=e}getStrength(){return this.strength}setStrength(e){this.strength=e}},Z=class extends R{constructor(e,t="inputBuffer"){super("ShaderPass"),this.fullscreenMaterial=e,this.input=t}setInput(e){this.input=e}render(e,t,s,i,r){const n=this.fullscreenMaterial.uniforms;t!==null&&n!==void 0&&n[this.input]!==void 0&&(n[this.input].value=t.texture),e.setRenderTarget(this.renderToScreen?null:s),e.render(this.scene,this.camera)}initialize(e,t,s){s!==void 0&&s!==_&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}},As=`#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D nearColorBuffer;uniform mediump sampler2D farColorBuffer;
#else
uniform lowp sampler2D nearColorBuffer;uniform lowp sampler2D farColorBuffer;
#endif
uniform lowp sampler2D nearCoCBuffer;uniform lowp sampler2D farCoCBuffer;uniform float scale;void mainImage(const in vec4 inputColor,const in vec2 uv,const in float depth,out vec4 outputColor){vec4 colorNear=texture2D(nearColorBuffer,uv);vec4 colorFar=texture2D(farColorBuffer,uv);
#if MASK_FUNCTION == 1
vec2 cocNearFar=vec2(texture2D(nearCoCBuffer,uv).r,colorFar.a);cocNearFar.x=min(cocNearFar.x*scale,1.0);
#else
vec2 cocNearFar=vec2(texture2D(nearCoCBuffer,uv).r,texture2D(farCoCBuffer,uv).g);cocNearFar=min(cocNearFar*scale,1.0);
#endif
vec4 result=inputColor*(1.0-cocNearFar.y)+colorFar;result=mix(result,colorNear,cocNearFar.x);outputColor=result;}`,Is=class extends G{constructor(e,{blendFunction:t,worldFocusDistance:s,worldFocusRange:i,focusDistance:r=0,focalLength:n=.1,focusRange:a=n,bokehScale:u=1,resolutionScale:l=1,width:c=C.AUTO_SIZE,height:f=C.AUTO_SIZE,resolutionX:d=c,resolutionY:x=f}={}){super("DepthOfFieldEffect",As,{blendFunction:t,attributes:I.DEPTH,uniforms:new Map([["nearColorBuffer",new h(null)],["farColorBuffer",new h(null)],["nearCoCBuffer",new h(null)],["farCoCBuffer",new h(null)],["scale",new h(1)]])}),this.camera=e,this.renderTarget=new F(1,1,{depthBuffer:!1}),this.renderTarget.texture.name="DoF.Intermediate",this.renderTargetMasked=this.renderTarget.clone(),this.renderTargetMasked.texture.name="DoF.Masked.Far",this.renderTargetNear=this.renderTarget.clone(),this.renderTargetNear.texture.name="DoF.Bokeh.Near",this.uniforms.get("nearColorBuffer").value=this.renderTargetNear.texture,this.renderTargetFar=this.renderTarget.clone(),this.renderTargetFar.texture.name="DoF.Bokeh.Far",this.uniforms.get("farColorBuffer").value=this.renderTargetFar.texture,this.renderTargetCoC=this.renderTarget.clone(),this.renderTargetCoC.texture.name="DoF.CoC",this.uniforms.get("farCoCBuffer").value=this.renderTargetCoC.texture,this.renderTargetCoCBlurred=this.renderTargetCoC.clone(),this.renderTargetCoCBlurred.texture.name="DoF.CoC.Blurred",this.uniforms.get("nearCoCBuffer").value=this.renderTargetCoCBlurred.texture,this.cocPass=new Z(new Us(e));const p=this.cocMaterial;p.focusDistance=r,p.focusRange=a,s!==void 0&&(p.worldFocusDistance=s),i!==void 0&&(p.worldFocusRange=i),this.blurPass=new je({resolutionScale:l,resolutionX:d,resolutionY:x,kernelSize:oe.MEDIUM}),this.maskPass=new Z(new Ps(this.renderTargetCoC.texture));const b=this.maskPass.fullscreenMaterial;b.colorChannel=Ve.GREEN,this.maskFunction=Se.MULTIPLY_RGB,this.bokehNearBasePass=new Z(new ee(!1,!0)),this.bokehNearBasePass.fullscreenMaterial.cocBuffer=this.renderTargetCoCBlurred.texture,this.bokehNearFillPass=new Z(new ee(!0,!0)),this.bokehNearFillPass.fullscreenMaterial.cocBuffer=this.renderTargetCoCBlurred.texture,this.bokehFarBasePass=new Z(new ee(!1,!1)),this.bokehFarBasePass.fullscreenMaterial.cocBuffer=this.renderTargetCoC.texture,this.bokehFarFillPass=new Z(new ee(!0,!1)),this.bokehFarFillPass.fullscreenMaterial.cocBuffer=this.renderTargetCoC.texture,this.target=null;const E=this.resolution=new C(this,d,x,l);E.addEventListener("change",D=>this.setSize(E.baseWidth,E.baseHeight)),this.bokehScale=u}set mainCamera(e){this.camera=e,this.cocMaterial.copyCameraSettings(e)}get cocTexture(){return this.renderTargetCoC.texture}get maskFunction(){return this.maskPass.fullscreenMaterial.maskFunction}set maskFunction(e){this.maskFunction!==e&&(this.defines.set("MASK_FUNCTION",e.toFixed(0)),this.maskPass.fullscreenMaterial.maskFunction=e,this.setChanged())}get cocMaterial(){return this.cocPass.fullscreenMaterial}get circleOfConfusionMaterial(){return this.cocMaterial}getCircleOfConfusionMaterial(){return this.cocMaterial}getBlurPass(){return this.blurPass}getResolution(){return this.resolution}get bokehScale(){return this.uniforms.get("scale").value}set bokehScale(e){this.bokehNearBasePass.fullscreenMaterial.scale=e,this.bokehNearFillPass.fullscreenMaterial.scale=e,this.bokehFarBasePass.fullscreenMaterial.scale=e,this.bokehFarFillPass.fullscreenMaterial.scale=e,this.maskPass.fullscreenMaterial.strength=e,this.uniforms.get("scale").value=e}getBokehScale(){return this.bokehScale}setBokehScale(e){this.bokehScale=e}getTarget(){return this.target}setTarget(e){this.target=e}calculateFocusDistance(e){const t=this.camera,s=t.position.distanceTo(e);return me(-s,t.near,t.far)}setDepthTexture(e,t=j){this.cocMaterial.depthBuffer=e,this.cocMaterial.depthPacking=t}update(e,t,s){const i=this.renderTarget,r=this.renderTargetCoC,n=this.renderTargetCoCBlurred,a=this.renderTargetMasked;if(this.target!==null){const u=this.calculateFocusDistance(this.target);this.cocMaterial.focusDistance=u}this.cocPass.render(e,null,r),this.blurPass.render(e,r,n),this.maskPass.render(e,t,a),this.bokehFarBasePass.render(e,a,i),this.bokehFarFillPass.render(e,i,this.renderTargetFar),this.bokehNearBasePass.render(e,t,i),this.bokehNearFillPass.render(e,i,this.renderTargetNear)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t);const i=s.width,r=s.height;this.cocPass.setSize(e,t),this.blurPass.setSize(e,t),this.maskPass.setSize(e,t),this.renderTargetFar.setSize(e,t),this.renderTargetCoC.setSize(e,t),this.renderTargetMasked.setSize(e,t),this.renderTarget.setSize(i,r),this.renderTargetNear.setSize(i,r),this.renderTargetCoCBlurred.setSize(i,r),this.bokehNearBasePass.fullscreenMaterial.setSize(e,t),this.bokehNearFillPass.fullscreenMaterial.setSize(e,t),this.bokehFarBasePass.fullscreenMaterial.setSize(e,t),this.bokehFarFillPass.fullscreenMaterial.setSize(e,t)}initialize(e,t,s){this.cocPass.initialize(e,t,s),this.maskPass.initialize(e,t,s),this.bokehNearBasePass.initialize(e,t,s),this.bokehNearFillPass.initialize(e,t,s),this.bokehFarBasePass.initialize(e,t,s),this.bokehFarFillPass.initialize(e,t,s),this.blurPass.initialize(e,t,_),e.capabilities.logarithmicDepthBuffer&&(this.cocPass.fullscreenMaterial.defines.LOG_DEPTH="1"),s!==void 0&&(this.renderTarget.texture.type=s,this.renderTargetNear.texture.type=s,this.renderTargetFar.texture.type=s,this.renderTargetMasked.texture.type=s,e!==null&&e.outputColorSpace===y&&(this.renderTarget.texture.colorSpace=y,this.renderTargetNear.texture.colorSpace=y,this.renderTargetFar.texture.colorSpace=y,this.renderTargetMasked.texture.colorSpace=y))}},W={DISABLED:0,SPORADIC:1,CONSTANT_MILD:2,CONSTANT_WILD:3};function Fs(e,t,s){const i=new Map([[ke,1],[dt,2],[ve,4]]);let r;if(i.has(t)||console.error("Invalid noise texture format"),s===_){r=new Uint8Array(e*i.get(t));for(let n=0,a=r.length;n<a;++n)r[n]=Math.random()*255+.5}else{r=new Float32Array(e*i.get(t));for(let n=0,a=r.length;n<a;++n)r[n]=Math.random()}return r}var De=class extends ht{constructor(e,t,s=ke,i=_){super(Fs(e*t,s,i),e,t,s,i),this.needsUpdate=!0}},Ns="uniform lowp sampler2D perturbationMap;uniform bool active;uniform float columns;uniform float random;uniform vec2 seeds;uniform vec2 distortion;void mainUv(inout vec2 uv){if(active){if(uv.y<distortion.x+columns&&uv.y>distortion.x-columns*random){float sx=clamp(ceil(seeds.x),0.0,1.0);uv.y=sx*(1.0-(uv.y+distortion.y))+(1.0-sx)*distortion.y;}if(uv.x<distortion.y+columns&&uv.x>distortion.y-columns*random){float sy=clamp(ceil(seeds.y),0.0,1.0);uv.x=sy*distortion.x+(1.0-sy)*(1.0-(uv.x+distortion.x));}vec2 normal=texture2D(perturbationMap,uv*random*random).rg;uv+=normal*seeds*(random*0.2);}}",te="Glitch.Generated";function w(e,t){return e+Math.random()*(t-e)}var zs=class extends G{constructor({chromaticAberrationOffset:e=null,delay:t=new T(1.5,3.5),duration:s=new T(.6,1),strength:i=new T(.3,1),columns:r=.05,ratio:n=.85,perturbationMap:a=null,dtSize:u=64}={}){if(super("GlitchEffect",Ns,{uniforms:new Map([["perturbationMap",new h(null)],["columns",new h(r)],["active",new h(!1)],["random",new h(1)],["seeds",new h(new T)],["distortion",new h(new T)]])}),a===null){const l=new De(u,u,ve);l.name=te,this.perturbationMap=l}else this.perturbationMap=a;this.time=0,this.distortion=this.uniforms.get("distortion").value,this.delay=t,this.duration=s,this.breakPoint=new T(w(this.delay.x,this.delay.y),w(this.duration.x,this.duration.y)),this.strength=i,this.mode=W.SPORADIC,this.ratio=n,this.chromaticAberrationOffset=e}get seeds(){return this.uniforms.get("seeds").value}get active(){return this.uniforms.get("active").value}isActive(){return this.active}get minDelay(){return this.delay.x}set minDelay(e){this.delay.x=e}getMinDelay(){return this.delay.x}setMinDelay(e){this.delay.x=e}get maxDelay(){return this.delay.y}set maxDelay(e){this.delay.y=e}getMaxDelay(){return this.delay.y}setMaxDelay(e){this.delay.y=e}get minDuration(){return this.duration.x}set minDuration(e){this.duration.x=e}getMinDuration(){return this.duration.x}setMinDuration(e){this.duration.x=e}get maxDuration(){return this.duration.y}set maxDuration(e){this.duration.y=e}getMaxDuration(){return this.duration.y}setMaxDuration(e){this.duration.y=e}get minStrength(){return this.strength.x}set minStrength(e){this.strength.x=e}getMinStrength(){return this.strength.x}setMinStrength(e){this.strength.x=e}get maxStrength(){return this.strength.y}set maxStrength(e){this.strength.y=e}getMaxStrength(){return this.strength.y}setMaxStrength(e){this.strength.y=e}getMode(){return this.mode}setMode(e){this.mode=e}getGlitchRatio(){return 1-this.ratio}setGlitchRatio(e){this.ratio=Math.min(Math.max(1-e,0),1)}get columns(){return this.uniforms.get("columns").value}set columns(e){this.uniforms.get("columns").value=e}getGlitchColumns(){return this.columns}setGlitchColumns(e){this.columns=e}getChromaticAberrationOffset(){return this.chromaticAberrationOffset}setChromaticAberrationOffset(e){this.chromaticAberrationOffset=e}get perturbationMap(){return this.uniforms.get("perturbationMap").value}set perturbationMap(e){const t=this.perturbationMap;t!==null&&t.name===te&&t.dispose(),e.minFilter=e.magFilter=Y,e.wrapS=e.wrapT=nt,e.generateMipmaps=!1,this.uniforms.get("perturbationMap").value=e}getPerturbationMap(){return this.perturbationMap}setPerturbationMap(e){this.perturbationMap=e}generatePerturbationMap(e=64){const t=new De(e,e,ve);return t.name=te,t}update(e,t,s){const i=this.mode,r=this.breakPoint,n=this.chromaticAberrationOffset,a=this.strength;let u=this.time,l=!1,c=0,f=0,d;i!==W.DISABLED&&(i===W.SPORADIC&&(u+=s,d=u>r.x,u>=r.x+r.y&&(r.set(w(this.delay.x,this.delay.y),w(this.duration.x,this.duration.y)),u=0)),c=Math.random(),this.uniforms.get("random").value=c,d&&c>this.ratio||i===W.CONSTANT_WILD?(l=!0,c*=a.y*.03,f=w(-Math.PI,Math.PI),this.seeds.set(w(-a.y,a.y),w(-a.y,a.y)),this.distortion.set(w(0,1),w(0,1))):(d||i===W.CONSTANT_MILD)&&(l=!0,c*=a.x*.03,f=w(-Math.PI,Math.PI),this.seeds.set(w(-a.x,a.x),w(-a.x,a.x)),this.distortion.set(w(0,1),w(0,1))),this.time=u),n!==null&&(l?n.set(Math.cos(f),Math.sin(f)).multiplyScalar(c):n.set(0,0)),this.uniforms.get("active").value=l}dispose(){const e=this.perturbationMap;e!==null&&e.name===te&&e.dispose()}},We=class extends R{constructor(e,t,s=null){super("RenderPass",e,t),this.needsSwap=!1,this.clearPass=new Ge,this.overrideMaterialManager=s===null?null:new Be(s),this.ignoreBackground=!1,this.skipShadowMapUpdate=!1,this.selection=null}set mainScene(e){this.scene=e}set mainCamera(e){this.camera=e}get renderToScreen(){return super.renderToScreen}set renderToScreen(e){super.renderToScreen=e,this.clearPass.renderToScreen=e}get overrideMaterial(){const e=this.overrideMaterialManager;return e!==null?e.material:null}set overrideMaterial(e){const t=this.overrideMaterialManager;e!==null?t!==null?t.setMaterial(e):this.overrideMaterialManager=new Be(e):t!==null&&(t.dispose(),this.overrideMaterialManager=null)}getOverrideMaterial(){return this.overrideMaterial}setOverrideMaterial(e){this.overrideMaterial=e}get clear(){return this.clearPass.enabled}set clear(e){this.clearPass.enabled=e}getSelection(){return this.selection}setSelection(e){this.selection=e}isBackgroundDisabled(){return this.ignoreBackground}setBackgroundDisabled(e){this.ignoreBackground=e}isShadowMapDisabled(){return this.skipShadowMapUpdate}setShadowMapDisabled(e){this.skipShadowMapUpdate=e}getClearPass(){return this.clearPass}render(e,t,s,i,r){const n=this.scene,a=this.camera,u=this.selection,l=a.layers.mask,c=n.background,f=e.shadowMap.autoUpdate,d=this.renderToScreen?null:t;u!==null&&a.layers.set(u.getLayer()),this.skipShadowMapUpdate&&(e.shadowMap.autoUpdate=!1),(this.ignoreBackground||this.clearPass.overrideClearColor!==null)&&(n.background=null),this.clearPass.enabled&&this.clearPass.render(e,t),e.setRenderTarget(d),this.overrideMaterialManager!==null?this.overrideMaterialManager.render(e,n,a):e.render(n,a),a.layers.mask=l,n.background=c,e.shadowMap.autoUpdate=f}},q={DEFAULT:0,ESKIL:1},Os=`void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec3 noise=vec3(rand(uv*(1.0+time)));
#ifdef PREMULTIPLY
outputColor=vec4(min(inputColor.rgb*noise,vec3(1.0)),inputColor.a);
#else
outputColor=vec4(noise,inputColor.a);
#endif
}`,ks=class extends G{constructor({blendFunction:e=v.SCREEN,premultiply:t=!1}={}){super("NoiseEffect",Os,{blendFunction:e}),this.premultiply=t}get premultiply(){return this.defines.has("PREMULTIPLY")}set premultiply(e){this.premultiply!==e&&(e?this.defines.set("PREMULTIPLY","1"):this.defines.delete("PREMULTIPLY"),this.setChanged())}isPremultiplied(){return this.premultiply}setPremultiplied(e){this.premultiply=e}},Ls=`#include <packing>
#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
#ifdef DOWNSAMPLE_NORMALS
uniform lowp sampler2D normalBuffer;
#endif
varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}int findBestDepth(const in float samples[4]){float c=(samples[0]+samples[1]+samples[2]+samples[3])*0.25;float distances[4];distances[0]=abs(c-samples[0]);distances[1]=abs(c-samples[1]);distances[2]=abs(c-samples[2]);distances[3]=abs(c-samples[3]);float maxDistance=max(max(distances[0],distances[1]),max(distances[2],distances[3]));int remaining[3];int rejected[3];int i,j,k;for(i=0,j=0,k=0;i<4;++i){if(distances[i]<maxDistance){remaining[j++]=i;}else{rejected[k++]=i;}}for(;j<3;++j){remaining[j]=rejected[--k];}vec3 s=vec3(samples[remaining[0]],samples[remaining[1]],samples[remaining[2]]);c=(s.x+s.y+s.z)/3.0;distances[0]=abs(c-s.x);distances[1]=abs(c-s.y);distances[2]=abs(c-s.z);float minDistance=min(distances[0],min(distances[1],distances[2]));for(i=0;i<3;++i){if(distances[i]==minDistance){break;}}return remaining[i];}void main(){float d[4];d[0]=readDepth(vUv0);d[1]=readDepth(vUv1);d[2]=readDepth(vUv2);d[3]=readDepth(vUv3);int index=findBestDepth(d);
#ifdef DOWNSAMPLE_NORMALS
vec3 n[4];n[0]=texture2D(normalBuffer,vUv0).rgb;n[1]=texture2D(normalBuffer,vUv1).rgb;n[2]=texture2D(normalBuffer,vUv2).rgb;n[3]=texture2D(normalBuffer,vUv3).rgb;
#else
vec3 n[4];n[0]=vec3(0.0);n[1]=vec3(0.0);n[2]=vec3(0.0);n[3]=vec3(0.0);
#endif
gl_FragColor=vec4(n[index],d[index]);}`,Hs="uniform vec2 texelSize;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vUv0=uv;vUv1=vec2(uv.x,uv.y+texelSize.y);vUv2=vec2(uv.x+texelSize.x,uv.y);vUv3=uv+texelSize;gl_Position=vec4(position.xy,1.0,1.0);}",Gs=class extends N{constructor(){super({name:"DepthDownsamplingMaterial",defines:{DEPTH_PACKING:"0"},uniforms:{depthBuffer:new h(null),normalBuffer:new h(null),texelSize:new h(new T)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,fragmentShader:Ls,vertexShader:Hs})}set depthBuffer(e){this.uniforms.depthBuffer.value=e}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer(e,t=j){this.depthBuffer=e,this.depthPacking=t}set normalBuffer(e){this.uniforms.normalBuffer.value=e,e!==null?this.defines.DOWNSAMPLE_NORMALS="1":delete this.defines.DOWNSAMPLE_NORMALS,this.needsUpdate=!0}setNormalBuffer(e){this.normalBuffer=e}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t)}setSize(e,t){this.uniforms.texelSize.value.set(1/e,1/t)}},js=class extends R{constructor({normalBuffer:e=null,resolutionScale:t=.5,width:s=C.AUTO_SIZE,height:i=C.AUTO_SIZE,resolutionX:r=s,resolutionY:n=i}={}){super("DepthDownsamplingPass");const a=new Gs;a.normalBuffer=e,this.fullscreenMaterial=a,this.needsDepthTexture=!0,this.needsSwap=!1,this.renderTarget=new F(1,1,{minFilter:Y,magFilter:Y,depthBuffer:!1,type:at}),this.renderTarget.texture.name="DepthDownsamplingPass.Target",this.renderTarget.texture.generateMipmaps=!1;const u=this.resolution=new C(this,r,n,t);u.addEventListener("change",l=>this.setSize(u.baseWidth,u.baseHeight))}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}getResolution(){return this.resolution}setDepthTexture(e,t=j){this.fullscreenMaterial.depthBuffer=e,this.fullscreenMaterial.depthPacking=t}render(e,t,s,i,r){e.setRenderTarget(this.renderToScreen?null:this.renderTarget),e.render(this.scene,this.camera)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t),this.renderTarget.setSize(s.width,s.height),this.fullscreenMaterial.setSize(e,t)}initialize(e,t,s){const i=e.getContext();if(!(i.getExtension("EXT_color_buffer_float")||i.getExtension("EXT_color_buffer_half_float")))throw new Error("Rendering to float texture is not supported.")}},Vs=`uniform float offset;uniform float darkness;void mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){const vec2 center=vec2(0.5);vec3 color=inputColor.rgb;
#if VIGNETTE_TECHNIQUE == 0
float d=distance(uv,center);color*=smoothstep(0.8,offset*0.799,d*(darkness+offset));
#else
vec2 coord=(uv-center)*vec2(offset);color=mix(color,vec3(1.0-darkness),dot(coord,coord));
#endif
outputColor=vec4(color,inputColor.a);}`,Ws=class extends G{constructor({blendFunction:e,eskil:t=!1,technique:s=t?q.ESKIL:q.DEFAULT,offset:i=.5,darkness:r=.5}={}){super("VignetteEffect",Vs,{blendFunction:e,defines:new Map([["VIGNETTE_TECHNIQUE",s.toFixed(0)]]),uniforms:new Map([["offset",new h(i)],["darkness",new h(r)]])})}get technique(){return Number(this.defines.get("VIGNETTE_TECHNIQUE"))}set technique(e){this.technique!==e&&(this.defines.set("VIGNETTE_TECHNIQUE",e.toFixed(0)),this.setChanged())}get eskil(){return this.technique===q.ESKIL}set eskil(e){this.technique=e?q.ESKIL:q.DEFAULT}getTechnique(){return this.technique}setTechnique(e){this.technique=e}get offset(){return this.uniforms.get("offset").value}set offset(e){this.uniforms.get("offset").value=e}getOffset(){return this.offset}setOffset(e){this.offset=e}get darkness(){return this.uniforms.get("darkness").value}set darkness(e){this.uniforms.get("darkness").value=e}getDarkness(){return this.darkness}setDarkness(e){this.darkness=e}},Ks=`#include <common>
#include <packing>
#include <dithering_pars_fragment>
#define packFloatToRGBA(v) packDepthToRGBA(v)
#define unpackRGBAToFloat(v) unpackRGBAToDepth(v)
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#if DEPTH_PACKING == 3201
uniform lowp sampler2D depthBuffer;
#elif defined(GL_FRAGMENT_PRECISION_HIGH)
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;vec4 sRGBToLinear(const in vec4 value){return vec4(mix(pow(value.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),value.rgb*0.0773993808,vec3(lessThanEqual(value.rgb,vec3(0.04045)))),value.a);}float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}float getViewZ(const in float depth){
#ifdef PERSPECTIVE_CAMERA
return perspectiveDepthToViewZ(depth,cameraNear,cameraFar);
#else
return orthographicDepthToViewZ(depth,cameraNear,cameraFar);
#endif
}vec3 RGBToHCV(const in vec3 RGB){vec4 P=mix(vec4(RGB.bg,-1.0,2.0/3.0),vec4(RGB.gb,0.0,-1.0/3.0),step(RGB.b,RGB.g));vec4 Q=mix(vec4(P.xyw,RGB.r),vec4(RGB.r,P.yzx),step(P.x,RGB.r));float C=Q.x-min(Q.w,Q.y);float H=abs((Q.w-Q.y)/(6.0*C+EPSILON)+Q.z);return vec3(H,C,Q.x);}vec3 RGBToHSL(const in vec3 RGB){vec3 HCV=RGBToHCV(RGB);float L=HCV.z-HCV.y*0.5;float S=HCV.y/(1.0-abs(L*2.0-1.0)+EPSILON);return vec3(HCV.x,S,L);}vec3 HueToRGB(const in float H){float R=abs(H*6.0-3.0)-1.0;float G=2.0-abs(H*6.0-2.0);float B=2.0-abs(H*6.0-4.0);return clamp(vec3(R,G,B),0.0,1.0);}vec3 HSLToRGB(const in vec3 HSL){vec3 RGB=HueToRGB(HSL.x);float C=(1.0-abs(2.0*HSL.z-1.0))*HSL.y;return(RGB-0.5)*C+HSL.z;}FRAGMENT_HEAD void main(){FRAGMENT_MAIN_UV vec4 color0=texture2D(inputBuffer,UV);vec4 color1=vec4(0.0);FRAGMENT_MAIN_IMAGE color0.a=clamp(color0.a,0.0,1.0);gl_FragColor=color0;
#ifdef ENCODE_OUTPUT
#include <colorspace_fragment>
#endif
#include <dithering_fragment>
}`,Zs="uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;VERTEX_HEAD void main(){vUv=position.xy*0.5+0.5;VERTEX_MAIN_SUPPORT gl_Position=vec4(position.xy,1.0,1.0);}",Xs=class extends N{constructor(e,t,s,i,r=!1){super({name:"EffectMaterial",defines:{THREE_REVISION:Le.replace(/\D+/g,""),DEPTH_PACKING:"0",ENCODE_OUTPUT:"1"},uniforms:{inputBuffer:new h(null),depthBuffer:new h(null),resolution:new h(new T),texelSize:new h(new T),cameraNear:new h(.3),cameraFar:new h(1e3),aspect:new h(1),time:new h(0)},blending:z,toneMapped:!1,depthWrite:!1,depthTest:!1,dithering:r}),e&&this.setShaderParts(e),t&&this.setDefines(t),s&&this.setUniforms(s),this.copyCameraSettings(i)}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}get depthBuffer(){return this.uniforms.depthBuffer.value}set depthBuffer(e){this.uniforms.depthBuffer.value=e}get depthPacking(){return Number(this.defines.DEPTH_PACKING)}set depthPacking(e){this.defines.DEPTH_PACKING=e.toFixed(0),this.needsUpdate=!0}setDepthBuffer(e,t=j){this.depthBuffer=e,this.depthPacking=t}setShaderData(e){this.setShaderParts(e.shaderParts),this.setDefines(e.defines),this.setUniforms(e.uniforms),this.setExtensions(e.extensions)}setShaderParts(e){return this.fragmentShader=Ks.replace(g.FRAGMENT_HEAD,e.get(g.FRAGMENT_HEAD)||"").replace(g.FRAGMENT_MAIN_UV,e.get(g.FRAGMENT_MAIN_UV)||"").replace(g.FRAGMENT_MAIN_IMAGE,e.get(g.FRAGMENT_MAIN_IMAGE)||""),this.vertexShader=Zs.replace(g.VERTEX_HEAD,e.get(g.VERTEX_HEAD)||"").replace(g.VERTEX_MAIN_SUPPORT,e.get(g.VERTEX_MAIN_SUPPORT)||""),this.needsUpdate=!0,this}setDefines(e){for(const t of e.entries())this.defines[t[0]]=t[1];return this.needsUpdate=!0,this}setUniforms(e){for(const t of e.entries())this.uniforms[t[0]]=t[1];return this}setExtensions(e){this.extensions={};for(const t of e)this.extensions[t]=!0;return this}get encodeOutput(){return this.defines.ENCODE_OUTPUT!==void 0}set encodeOutput(e){this.encodeOutput!==e&&(e?this.defines.ENCODE_OUTPUT="1":delete this.defines.ENCODE_OUTPUT,this.needsUpdate=!0)}isOutputEncodingEnabled(e){return this.encodeOutput}setOutputEncodingEnabled(e){this.encodeOutput=e}get time(){return this.uniforms.time.value}set time(e){this.uniforms.time.value=e}setDeltaTime(e){this.uniforms.time.value+=e}adoptCameraSettings(e){this.copyCameraSettings(e)}copyCameraSettings(e){e&&(this.uniforms.cameraNear.value=e.near,this.uniforms.cameraFar.value=e.far,e instanceof Oe?this.defines.PERSPECTIVE_CAMERA="1":delete this.defines.PERSPECTIVE_CAMERA,this.needsUpdate=!0)}setSize(e,t){const s=this.uniforms;s.resolution.value.set(e,t),s.texelSize.value.set(1/e,1/t),s.aspect.value=e/t}static get Section(){return g}};function we(e,t,s){for(const i of t){const r="$1"+e+i.charAt(0).toUpperCase()+i.slice(1),n=new RegExp("([^\\.])(\\b"+i+"\\b)","g");for(const a of s.entries())a[1]!==null&&s.set(a[0],a[1].replace(n,r))}}function qs(e,t,s){let i=t.getFragmentShader(),r=t.getVertexShader();const n=i!==void 0&&/mainImage/.test(i),a=i!==void 0&&/mainUv/.test(i);if(s.attributes|=t.getAttributes(),i===void 0)throw new Error(`Missing fragment shader (${t.name})`);if(a&&s.attributes&I.CONVOLUTION)throw new Error(`Effects that transform UVs are incompatible with convolution effects (${t.name})`);if(!n&&!a)throw new Error(`Could not find mainImage or mainUv function (${t.name})`);{const u=/\w+\s+(\w+)\([\w\s,]*\)\s*{/g,l=s.shaderParts;let c=l.get(g.FRAGMENT_HEAD)||"",f=l.get(g.FRAGMENT_MAIN_UV)||"",d=l.get(g.FRAGMENT_MAIN_IMAGE)||"",x=l.get(g.VERTEX_HEAD)||"",p=l.get(g.VERTEX_MAIN_SUPPORT)||"";const b=new Set,E=new Set;if(a&&(f+=`	${e}MainUv(UV);
`,s.uvTransformation=!0),r!==null&&/mainSupport/.test(r)){const S=/mainSupport *\([\w\s]*?uv\s*?\)/.test(r);p+=`	${e}MainSupport(`,p+=S?`vUv);
`:`);
`;for(const m of r.matchAll(/(?:varying\s+\w+\s+([\S\s]*?);)/g))for(const B of m[1].split(/\s*,\s*/))s.varyings.add(B),b.add(B),E.add(B);for(const m of r.matchAll(u))E.add(m[1])}for(const S of i.matchAll(u))E.add(S[1]);for(const S of t.defines.keys())E.add(S.replace(/\([\w\s,]*\)/g,""));for(const S of t.uniforms.keys())E.add(S);E.delete("while"),E.delete("for"),E.delete("if"),t.uniforms.forEach((S,m)=>s.uniforms.set(e+m.charAt(0).toUpperCase()+m.slice(1),S)),t.defines.forEach((S,m)=>s.defines.set(e+m.charAt(0).toUpperCase()+m.slice(1),S));const D=new Map([["fragment",i],["vertex",r]]);we(e,E,s.defines),we(e,E,D),i=D.get("fragment"),r=D.get("vertex");const U=t.blendMode;if(s.blendModes.set(U.blendFunction,U),n){t.inputColorSpace!==null&&t.inputColorSpace!==s.colorSpace&&(d+=t.inputColorSpace===y?`color0 = sRGBTransferOETF(color0);
	`:`color0 = sRGBToLinear(color0);
	`),t.outputColorSpace!==Ie?s.colorSpace=t.outputColorSpace:t.inputColorSpace!==null&&(s.colorSpace=t.inputColorSpace);const S=/MainImage *\([\w\s,]*?depth[\w\s,]*?\)/;d+=`${e}MainImage(color0, UV, `,s.attributes&I.DEPTH&&S.test(i)&&(d+="depth, ",s.readDepth=!0),d+=`color1);
	`;const m=e+"BlendOpacity";s.uniforms.set(m,U.opacity),d+=`color0 = blend${U.blendFunction}(color0, color1, ${m});

	`,c+=`uniform float ${m};

`}if(c+=i+`
`,r!==null&&(x+=r+`
`),l.set(g.FRAGMENT_HEAD,c),l.set(g.FRAGMENT_MAIN_UV,f),l.set(g.FRAGMENT_MAIN_IMAGE,d),l.set(g.VERTEX_HEAD,x),l.set(g.VERTEX_MAIN_SUPPORT,p),t.extensions!==null)for(const S of t.extensions)s.extensions.add(S)}}var Ys=class extends R{constructor(e,...t){super("EffectPass"),this.fullscreenMaterial=new Xs(null,null,null,e),this.listener=s=>this.handleEvent(s),this.effects=[],this.setEffects(t),this.skipRendering=!1,this.minTime=1,this.maxTime=Number.POSITIVE_INFINITY,this.timeScale=1}set mainScene(e){for(const t of this.effects)t.mainScene=e}set mainCamera(e){this.fullscreenMaterial.copyCameraSettings(e);for(const t of this.effects)t.mainCamera=e}get encodeOutput(){return this.fullscreenMaterial.encodeOutput}set encodeOutput(e){this.fullscreenMaterial.encodeOutput=e}get dithering(){return this.fullscreenMaterial.dithering}set dithering(e){const t=this.fullscreenMaterial;t.dithering=e,t.needsUpdate=!0}setEffects(e){for(const t of this.effects)t.removeEventListener("change",this.listener);this.effects=e.sort((t,s)=>s.attributes-t.attributes);for(const t of this.effects)t.addEventListener("change",this.listener)}updateMaterial(){const e=new Dt;let t=0;for(const a of this.effects)if(a.blendMode.blendFunction===v.DST)e.attributes|=a.getAttributes()&I.DEPTH;else{if(e.attributes&a.getAttributes()&I.CONVOLUTION)throw new Error(`Convolution effects cannot be merged (${a.name})`);qs("e"+t++,a,e)}let s=e.shaderParts.get(g.FRAGMENT_HEAD),i=e.shaderParts.get(g.FRAGMENT_MAIN_IMAGE),r=e.shaderParts.get(g.FRAGMENT_MAIN_UV);const n=/\bblend\b/g;for(const a of e.blendModes.values())s+=a.getShaderCode().replace(n,`blend${a.blendFunction}`)+`
`;e.attributes&I.DEPTH?(e.readDepth&&(i=`float depth = readDepth(UV);

	`+i),this.needsDepthTexture=this.getDepthTexture()===null):this.needsDepthTexture=!1,e.colorSpace===y&&(i+=`color0 = sRGBToLinear(color0);
	`),e.uvTransformation?(r=`vec2 transformedUv = vUv;
`+r,e.defines.set("UV","transformedUv")):e.defines.set("UV","vUv"),e.shaderParts.set(g.FRAGMENT_HEAD,s),e.shaderParts.set(g.FRAGMENT_MAIN_IMAGE,i),e.shaderParts.set(g.FRAGMENT_MAIN_UV,r);for(const[a,u]of e.shaderParts)u!==null&&e.shaderParts.set(a,u.trim().replace(/^#/,`
#`));this.skipRendering=t===0,this.needsSwap=!this.skipRendering,this.fullscreenMaterial.setShaderData(e)}recompile(){this.updateMaterial()}getDepthTexture(){return this.fullscreenMaterial.depthBuffer}setDepthTexture(e,t=j){this.fullscreenMaterial.depthBuffer=e,this.fullscreenMaterial.depthPacking=t;for(const s of this.effects)s.setDepthTexture(e,t)}render(e,t,s,i,r){for(const n of this.effects)n.update(e,t,i);if(!this.skipRendering||this.renderToScreen){const n=this.fullscreenMaterial;n.inputBuffer=t.texture,n.time+=i*this.timeScale,e.setRenderTarget(this.renderToScreen?null:s),e.render(this.scene,this.camera)}}setSize(e,t){this.fullscreenMaterial.setSize(e,t);for(const s of this.effects)s.setSize(e,t)}initialize(e,t,s){this.renderer=e;for(const i of this.effects)i.initialize(e,t,s);this.updateMaterial(),s!==void 0&&s!==_&&(this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1")}dispose(){super.dispose();for(const e of this.effects)e.removeEventListener("change",this.listener),e.dispose()}handleEvent(e){switch(e.type){case"change":this.recompile();break}}},Qs=class extends R{constructor(e,t,{renderTarget:s,resolutionScale:i=1,width:r=C.AUTO_SIZE,height:n=C.AUTO_SIZE,resolutionX:a=r,resolutionY:u=n}={}){super("NormalPass"),this.needsSwap=!1,this.renderPass=new We(e,t,new ot);const l=this.renderPass;l.ignoreBackground=!0,l.skipShadowMapUpdate=!0;const c=l.getClearPass();c.overrideClearColor=new Fe(7829503),c.overrideClearAlpha=1,this.renderTarget=s,this.renderTarget===void 0&&(this.renderTarget=new F(1,1,{minFilter:Y,magFilter:Y}),this.renderTarget.texture.name="NormalPass.Target");const f=this.resolution=new C(this,a,u,i);f.addEventListener("change",d=>this.setSize(f.baseWidth,f.baseHeight))}set mainScene(e){this.renderPass.mainScene=e}set mainCamera(e){this.renderPass.mainCamera=e}get texture(){return this.renderTarget.texture}getTexture(){return this.renderTarget.texture}getResolution(){return this.resolution}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,s,i,r){const n=this.renderToScreen?null:this.renderTarget;this.renderPass.render(e,n,n)}setSize(e,t){const s=this.resolution;s.setBaseSize(e,t),this.renderTarget.setSize(s.width,s.height)}};const Ke=M.createContext(null),Ue=e=>(e.getAttributes()&I.CONVOLUTION)===I.CONVOLUTION,$s=re.memo(M.forwardRef(({children:e,camera:t,scene:s,resolutionScale:i,enabled:r=!0,renderPriority:n=1,autoClear:a=!0,depthBuffer:u,enableNormalPass:l,stencilBuffer:c,multisampling:f=8,frameBufferType:d=pt},x)=>{const{gl:p,scene:b,camera:E,size:D}=ge(),U=s||b,S=t||E,[m,B,O]=M.useMemo(()=>{const L=qe(),P=new Rt(p,{depthBuffer:u,stencilBuffer:c,multisampling:f>0&&L?f:0,frameBufferType:d});P.addPass(new We(U,S));let k=null,A=null;return l&&(A=new Qs(U,S),A.enabled=!1,P.addPass(A),i!==void 0&&L&&(k=new js({normalBuffer:A.texture,resolutionScale:i}),k.enabled=!1,P.addPass(k))),[P,A,k]},[S,p,u,c,f,d,U,l,i]);M.useEffect(()=>m==null?void 0:m.setSize(D.width,D.height),[m,D]),ae((L,P)=>{if(r){const k=p.autoClear;p.autoClear=a,c&&!a&&p.clearStencil(),m.render(P),p.autoClear=k}},r?n:0);const Te=M.useRef(null);M.useLayoutEffect(()=>{var L;const P=[],k=(L=Te.current)==null?void 0:L.__r3f;if(k&&m){const A=k.objects;for(let V=0;V<A.length;V++){const X=A[V];if(X instanceof G){const Me=[X];if(!Ue(X)){let ue=null;for(;(ue=A[V+1])instanceof G&&!Ue(ue);)Me.push(ue),V++}const Xe=new Ys(S,...Me);P.push(Xe)}else X instanceof R&&P.push(X)}for(const V of P)m==null||m.addPass(V);B&&(B.enabled=!0),O&&(O.enabled=!0)}return()=>{for(const A of P)m==null||m.removePass(A);B&&(B.enabled=!1),O&&(O.enabled=!1)}},[m,e,S,B,O]),M.useEffect(()=>{const L=p.toneMapping;return p.toneMapping=vt,()=>{p.toneMapping=L}},[p]);const Ze=M.useMemo(()=>({composer:m,normalPass:B,downSamplingPass:O,resolutionScale:i,camera:S,scene:U}),[m,B,O,i,S,U]);return M.useImperativeHandle(x,()=>m,[m]),o.jsx(Ke.Provider,{value:Ze,children:o.jsx("group",{ref:Te,children:e})})}));let Js=0;const _e=new WeakMap,le=(e,t)=>re.forwardRef(function({blendFunction:i=t==null?void 0:t.blendFunction,opacity:r=t==null?void 0:t.opacity,...n},a){let u=_e.get(e);if(!u){const f=`@react-three/postprocessing/${e.name}-${Js++}`;Ye({[f]:e}),_e.set(e,u=f)}const l=ge(f=>f.camera),c=re.useMemo(()=>{var f,d;return[...(f=t==null?void 0:t.args)!=null?f:[],...(d=n.args)!=null?d:[{...t,...n}]]},[JSON.stringify(n)]);return o.jsx(u,{camera:l,"blendMode-blendFunction":i,"blendMode-opacity-value":r,...n,ref:a,args:c})}),se=(e,t)=>{const s=e[t];return re.useMemo(()=>typeof s=="number"?new T(s,s):s?new T(...s):new T,[s])},ei=M.forwardRef(function({blendFunction:t,worldFocusDistance:s,worldFocusRange:i,focusDistance:r,focusRange:n,focalLength:a,bokehScale:u,resolutionScale:l,resolutionX:c,resolutionY:f,width:d,height:x,target:p,depthTexture:b,...E},D){const{camera:U}=M.useContext(Ke),S=p!=null,m=M.useMemo(()=>{const B=new Is(U,{blendFunction:t,worldFocusDistance:s,worldFocusRange:i,focusDistance:r,focusRange:n,focalLength:a,bokehScale:u,resolutionScale:l,resolutionX:c,resolutionY:f,width:d,height:x});S&&(B.target=new mt),b&&B.setDepthTexture(b.texture,b.packing);const O=B.maskPass;return O.maskFunction=Se.MULTIPLY_RGB_SET_ALPHA,B},[U,t,s,i,r,n,a,u,l,c,f,d,x,S,b]);return M.useEffect(()=>()=>{m.dispose()},[m]),o.jsx("primitive",{...E,ref:D,object:m,target:p})}),ti=le(bs,{blendFunction:v.ADD}),si=le(Rs),ii=M.forwardRef(function({active:t=!0,...s},i){const r=ge(f=>f.invalidate),n=se(s,"delay"),a=se(s,"duration"),u=se(s,"strength"),l=se(s,"chromaticAberrationOffset"),c=M.useMemo(()=>new zs({...s,delay:n,duration:a,strength:u,chromaticAberrationOffset:l}),[n,a,s,u,l]);return M.useLayoutEffect(()=>{c.mode=t?s.mode||W.SPORADIC:W.DISABLED,r()},[t,c,r,s.mode]),M.useEffect(()=>()=>{var f;(f=c.dispose)==null||f.call(c)},[c]),o.jsx("primitive",{ref:i,object:c,dispose:null})}),ri=le(ks,{blendFunction:v.COLOR_DODGE}),ni=le(Ws),ai=K.div`
  width: 100vw;
  height: 100vh;
  display: flex;
  position: relative;
  padding-top: 80px;
`,oi=K.div`
  flex: 1;
  height: calc(100vh - 80px);
  position: relative;
`,li=K(St.div)`
  width: 350px;
  background: rgba(26, 26, 26, 0.95);
  backdrop-filter: blur(20px);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
  padding: 2rem;
  overflow-y: auto;
  z-index: 100;
`,ui=K.h2`
  color: var(--accent-color);
  font-size: 1.5rem;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
`,Pe=K.p`
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: 1.5rem;
`,ie=K.ul`
  color: var(--text-secondary);
  margin-left: 1rem;
  
  li {
    margin-bottom: 0.5rem;
    
    code {
      background: rgba(0, 255, 255, 0.1);
      color: var(--accent-color);
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-size: 0.9rem;
    }
  }
`,ci=K.details`
  margin-top: 2rem;
  
  summary {
    color: var(--accent-color);
    cursor: pointer;
    font-weight: 600;
    margin-bottom: 1rem;
  }
  
  pre {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 1rem;
    overflow-x: auto;
    font-size: 0.8rem;
    color: var(--text-secondary);
  }
`;function fe({position:e,color:t,intensity:s=1}){const i=M.useRef();return ae(r=>{i.current&&(i.current.rotation.x=r.clock.elapsedTime*.5,i.current.rotation.y=r.clock.elapsedTime*.3)}),o.jsxs("mesh",{ref:i,position:e,children:[o.jsx("sphereGeometry",{args:[.5,32,32]}),o.jsx("meshStandardMaterial",{color:t,emissive:t,emissiveIntensity:s,roughness:.1,metalness:.8})]})}function hi({position:e,color:t}){const s=M.useRef();return ae(i=>{s.current&&(s.current.rotation.x=i.clock.elapsedTime*.8,s.current.rotation.y=i.clock.elapsedTime*.6)}),o.jsxs("mesh",{ref:s,position:e,children:[o.jsx("torusGeometry",{args:[1,.3,16,100]}),o.jsx("meshStandardMaterial",{color:t,roughness:.2,metalness:.9})]})}function de({position:e,scale:t=1}){const s=M.useRef(),i=M.useMemo(()=>new gt(.5,2,8),[]);return ae(r=>{s.current&&(s.current.rotation.y=r.clock.elapsedTime*.5)}),o.jsxs("mesh",{ref:s,position:e,scale:t,children:[o.jsx("primitive",{object:i}),o.jsx("meshPhysicalMaterial",{color:"#ffffff",transmission:.9,opacity:.8,transparent:!0,roughness:0,metalness:0,clearcoat:1,clearcoatRoughness:0,ior:1.5})]})}function fi(){const{enableBloom:e,bloomIntensity:t,bloomRadius:s,enableDOF:i,focusDistance:r,focalLength:n,bokehScale:a,enableNoise:u,noiseIntensity:l,enableVignette:c,vignetteOffset:f,vignetteDarkness:d,enableChromaticAberration:x,chromaticAberrationOffset:p,enableGlitch:b,glitchDelay:E,glitchDuration:D}=xt("åæå¤ç",{enableBloom:{value:!0,label:"å¯ç¨è¾å"},bloomIntensity:{value:1.5,min:0,max:3,step:.1,label:"è¾åå¼ºåº¦"},bloomRadius:{value:.4,min:0,max:1,step:.01,label:"è¾ååå¾"},enableDOF:{value:!1,label:"å¯ç¨æ¯æ·±"},focusDistance:{value:.02,min:0,max:.2,step:.001,label:"ç¦ç¹è·ç¦»"},focalLength:{value:.02,min:0,max:.1,step:.001,label:"ç¦è·"},bokehScale:{value:2,min:0,max:10,step:.1,label:"æ£æ¯ç¼©æ¾"},enableNoise:{value:!1,label:"å¯ç¨åªç¹"},noiseIntensity:{value:.4,min:0,max:1,step:.01,label:"åªç¹å¼ºåº¦"},enableVignette:{value:!1,label:"å¯ç¨æè§"},vignetteOffset:{value:.1,min:0,max:1,step:.01,label:"æè§åç§»"},vignetteDarkness:{value:1,min:0,max:2,step:.1,label:"æè§å¼ºåº¦"},enableChromaticAberration:{value:!1,label:"å¯ç¨è²å·®"},chromaticAberrationOffset:{value:.002,min:0,max:.01,step:1e-4,label:"è²å·®åç§»"},enableGlitch:{value:!1,label:"å¯ç¨æé"},glitchDelay:{value:1.5,min:.1,max:5,step:.1,label:"æéå»¶è¿"},glitchDuration:{value:.6,min:.1,max:2,step:.1,label:"æéæç»­"}});return o.jsxs(o.Fragment,{children:[o.jsx(Je,{preset:"city"}),o.jsx("ambientLight",{intensity:.2}),o.jsx("directionalLight",{position:[10,10,5],intensity:.8}),o.jsx("pointLight",{position:[-10,-10,-10],color:"#ff0080",intensity:.5}),o.jsx("pointLight",{position:[10,-10,10],color:"#0080ff",intensity:.5}),o.jsx(fe,{position:[-3,2,0],color:"#ff0080",intensity:2}),o.jsx(fe,{position:[3,2,0],color:"#0080ff",intensity:2}),o.jsx(fe,{position:[0,-2,3],color:"#80ff00",intensity:1.5}),o.jsx(hi,{position:[0,0,0],color:"#ffff00"}),o.jsx(de,{position:[-2,-1,-2],scale:.8}),o.jsx(de,{position:[2,1,-4],scale:1.2}),o.jsx(de,{position:[0,3,-6],scale:.6}),o.jsxs("mesh",{position:[0,-3,0],rotation:[-Math.PI/2,0,0],children:[o.jsx("planeGeometry",{args:[20,20]}),o.jsx("meshStandardMaterial",{color:"#1a1a1a",roughness:.8,metalness:.2})]}),o.jsx(et,{position:[0,5,0],fontSize:1,color:"#00ffff",anchorX:"center",anchorY:"middle",children:"åæå¤çææ"}),o.jsxs($s,{children:[e&&o.jsx(ti,{intensity:t,radius:s,luminanceThreshold:.9,luminanceSmoothing:.025}),i&&o.jsx(ei,{focusDistance:r,focalLength:n,bokehScale:a}),u&&o.jsx(ri,{premultiply:!0,blendFunction:(void 0).ADD,opacity:l}),c&&o.jsx(ni,{offset:f,darkness:d}),x&&o.jsx(si,{offset:[p,p]}),b&&o.jsx(ii,{delay:[E,E+D],duration:[D*.1,D],strength:[.3,1]})]})]})}function Si(){return o.jsxs(ai,{children:[o.jsx(oi,{children:o.jsx(Qe,{camera:{position:[0,0,8],fov:75},gl:{antialias:!0,alpha:!1},children:o.jsxs(M.Suspense,{fallback:null,children:[o.jsx(fi,{}),o.jsx($e,{enableDamping:!0,dampingFactor:.05,minDistance:3,maxDistance:20})]})})}),o.jsxs(li,{initial:{x:350},animate:{x:0},transition:{duration:.5},children:[o.jsx(ui,{children:"ð­ åæå¤ç"}),o.jsx(Pe,{children:"åæå¤çæ¯ç°ä»£3Dæ¸²æä¸­çéè¦ææ¯ï¼éè¿å¨æ¸²æå®æåå¯¹å¾åè¿è¡å¤çï¼å¯ä»¥å®ç°åç§è§è§ææï¼æåç»é¢è´¨éåèºæ¯è¡¨ç°åã"}),o.jsx("h3",{style:{color:"var(--accent-color)",marginBottom:"1rem"},children:"ä¸»è¦ææ"}),o.jsxs(ie,{children:[o.jsxs("li",{children:[o.jsx("code",{children:"Bloom"})," - è¾åææï¼è®©æäº®åºåäº§çåæ"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Depth of Field"})," - æ¯æ·±ææï¼æ¨¡æç¸æºç¦ç¹"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Noise"})," - åªç¹ææï¼å¢å è¶çè´¨æ"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Vignette"})," - æè§ææï¼çªåºä¸­å¿åºå"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Chromatic Aberration"})," - è²å·®ææï¼æ¨¡æéå¤´ç¼ºé·"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Glitch"})," - æéææï¼æ°å­èºæ¯é£æ ¼"]})]}),o.jsx("h3",{style:{color:"var(--accent-color)",marginBottom:"1rem",marginTop:"2rem"},children:"æ ¸å¿ç»ä»¶"}),o.jsxs(ie,{children:[o.jsxs("li",{children:[o.jsx("code",{children:"EffectComposer"})," - ææåæå¨ï¼ç®¡çæ¸²æéé"]}),o.jsxs("li",{children:[o.jsx("code",{children:"RenderPass"})," - åºç¡æ¸²æéé"]}),o.jsxs("li",{children:[o.jsx("code",{children:"ShaderPass"})," - çè²å¨ééï¼èªå®ä¹ææ"]}),o.jsxs("li",{children:[o.jsx("code",{children:"WebGLRenderTarget"})," - æ¸²æç®æ ï¼å­å¨ä¸­é´ç»æ"]})]}),o.jsx("h3",{style:{color:"var(--accent-color)",marginBottom:"1rem",marginTop:"2rem"},children:"æ¸²ææµç¨"}),o.jsxs(ie,{children:[o.jsxs("li",{children:[o.jsx("code",{children:"Scene Render"})," - åºæ¯æ¸²æå°çº¹ç"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Effect Passes"})," - ä¾æ¬¡åºç¨åç§ææ"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Blend Modes"})," - æ··åæ¨¡å¼æ§å¶ææå å "]}),o.jsxs("li",{children:[o.jsx("code",{children:"Final Output"})," - æç»è¾åºå°å±å¹"]})]}),o.jsx("h3",{style:{color:"var(--accent-color)",marginBottom:"1rem",marginTop:"2rem"},children:"æ§è½ä¼å"}),o.jsxs(Pe,{children:["â¢ åçæ§å¶æ¸²æç®æ åè¾¨ç",o.jsx("br",{}),"â¢ é¿åè¿å¤çæ¸²æéé",o.jsx("br",{}),"â¢ ä½¿ç¨ååè¾¨çè¿è¡æè´µçææ",o.jsx("br",{}),"â¢ å¨æå¯ç¨/ç¦ç¨ææ",o.jsx("br",{}),"â¢ ä½¿ç¨ MRTï¼å¤æ¸²æç®æ ï¼ä¼å"]}),o.jsx("h3",{style:{color:"var(--accent-color)",marginBottom:"1rem",marginTop:"2rem"},children:"é«çº§æå·§"}),o.jsxs(ie,{children:[o.jsxs("li",{children:[o.jsx("code",{children:"Temporal Effects"})," - æ¶é´ç¸å³çææï¼TAAãMotion Blurï¼"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Screen Space"})," - å±å¹ç©ºé´ææï¼SSAOãSSRï¼"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Tone Mapping"})," - è²è°æ å°ï¼HDRå°LDRè½¬æ¢"]}),o.jsxs("li",{children:[o.jsx("code",{children:"Color Grading"})," - é¢è²åçº§ï¼è°æ´ç»é¢è²è°"]})]}),o.jsxs(ci,{children:[o.jsx("summary",{children:"ð æ¥çæ ¸å¿ä»£ç "}),o.jsx("pre",{children:`// åå»ºææåæå¨
const composer = new EffectComposer(renderer)

// æ·»å åºç¡æ¸²æéé
const renderPass = new RenderPass(scene, camera)
composer.addPass(renderPass)

// æ·»å è¾åææ
const bloomPass = new UnrealBloomPass(
  new THREE.Vector2(window.innerWidth, window.innerHeight),
  1.5,  // intensity
  0.4,  // radius
  0.85  // threshold
)
composer.addPass(bloomPass)

// æ·»å æ¯æ·±ææ
const bokehPass = new BokehPass(scene, camera, {
  focus: 1.0,
  aperture: 0.025,
  maxblur: 0.01
})
composer.addPass(bokehPass)

// èªå®ä¹çè²å¨éé
const customShader = {
  uniforms: {
    tDiffuse: { value: null },
    time: { value: 0 },
    intensity: { value: 1.0 }
  },
  vertexShader: \`
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
  \`,
  fragmentShader: \`
    uniform sampler2D tDiffuse;
    uniform float time;
    uniform float intensity;
    varying vec2 vUv;
    
    void main() {
      vec4 color = texture2D(tDiffuse, vUv);
      
      // æ·»å åªç¹
      float noise = fract(sin(dot(vUv * time, vec2(12.9898, 78.233))) * 43758.5453);
      color.rgb += noise * 0.1 * intensity;
      
      gl_FragColor = color;
    }
  \`
}

const customPass = new ShaderPass(customShader)
composer.addPass(customPass)

// æ¸²æå¾ªç¯
function animate() {
  customPass.uniforms.time.value = performance.now() * 0.001
  
  // ä½¿ç¨åæå¨æ¸²æèä¸æ¯ç´æ¥æ¸²æ
  composer.render()
  
  requestAnimationFrame(animate)
}

// ååºçªå£å¤§å°åå
function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight
  camera.updateProjectionMatrix()
  
  renderer.setSize(window.innerWidth, window.innerHeight)
  composer.setSize(window.innerWidth, window.innerHeight)
}`})]})]})]})}export{Si as default};
//# sourceMappingURL=PostProcessing-1c03eb06.js.map
