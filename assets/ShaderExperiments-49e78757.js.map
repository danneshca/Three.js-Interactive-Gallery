{"version":3,"file":"ShaderExperiments-49e78757.js","sources":["../../src/pages/advanced/ShaderExperiments.jsx"],"sourcesContent":["import React, { Suspense, useRef, useMemo } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, Text, Plane } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// Water wave shader\nconst waterShader = {\n  uniforms: {\n    time: { value: 0 },\n    resolution: { value: new THREE.Vector2() },\n    waveSpeed: { value: 1.0 },\n    waveAmplitude: { value: 0.1 },\n    waveFrequency: { value: 4.0 },\n    waterColor: { value: new THREE.Color(0.1, 0.3, 0.8) },\n    foamColor: { value: new THREE.Color(1.0, 1.0, 1.0) }\n  },\n  vertexShader: `\n    uniform float time;\n    uniform float waveAmplitude;\n    uniform float waveFrequency;\n    uniform float waveSpeed;\n    \n    varying vec2 vUv;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    \n    void main() {\n      vUv = uv;\n      \n      vec3 pos = position;\n      \n      // Create wave displacement\n      float wave1 = sin(pos.x * waveFrequency + time * waveSpeed) * waveAmplitude;\n      float wave2 = sin(pos.z * waveFrequency * 0.7 + time * waveSpeed * 1.3) * waveAmplitude * 0.5;\n      float wave3 = sin((pos.x + pos.z) * waveFrequency * 0.3 + time * waveSpeed * 0.8) * waveAmplitude * 0.3;\n      \n      pos.y += wave1 + wave2 + wave3;\n      \n      // Calculate normal for lighting\n      float dx = cos(pos.x * waveFrequency + time * waveSpeed) * waveFrequency * waveAmplitude;\n      float dz = cos(pos.z * waveFrequency * 0.7 + time * waveSpeed * 1.3) * waveFrequency * 0.7 * waveAmplitude * 0.5;\n      \n      vec3 normal = normalize(vec3(-dx, 1.0, -dz));\n      vNormal = normalMatrix * normal;\n      \n      vPosition = pos;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform float time;\n    uniform vec2 resolution;\n    uniform vec3 waterColor;\n    uniform vec3 foamColor;\n    \n    varying vec2 vUv;\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    \n    void main() {\n      vec2 uv = vUv;\n      \n      // Animated water texture\n      vec2 wave1 = vec2(sin(uv.x * 10.0 + time), cos(uv.y * 10.0 + time)) * 0.02;\n      vec2 wave2 = vec2(cos(uv.x * 15.0 - time * 1.5), sin(uv.y * 15.0 - time * 1.5)) * 0.01;\n      \n      vec2 distortedUv = uv + wave1 + wave2;\n      \n      // Fresnel effect\n      vec3 viewDirection = normalize(cameraPosition - vPosition);\n      float fresnel = pow(1.0 - dot(normalize(vNormal), viewDirection), 2.0);\n      \n      // Foam based on wave height\n      float foam = smoothstep(0.05, 0.1, vPosition.y);\n      \n      // Mix colors\n      vec3 color = mix(waterColor, foamColor, foam);\n      color = mix(color, vec3(0.8, 0.9, 1.0), fresnel * 0.3);\n      \n      // Add some sparkle\n      float sparkle = sin(distortedUv.x * 50.0) * sin(distortedUv.y * 50.0);\n      sparkle = smoothstep(0.8, 1.0, sparkle);\n      color += sparkle * 0.2;\n      \n      gl_FragColor = vec4(color, 0.8);\n    }\n  `\n}\n\n// Fire shader\nconst fireShader = {\n  uniforms: {\n    time: { value: 0 },\n    resolution: { value: new THREE.Vector2() },\n    fireIntensity: { value: 1.0 },\n    fireSpeed: { value: 1.0 },\n    fireHeight: { value: 2.0 }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    varying vec3 vPosition;\n    \n    void main() {\n      vUv = uv;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform float time;\n    uniform vec2 resolution;\n    uniform float fireIntensity;\n    uniform float fireSpeed;\n    uniform float fireHeight;\n    \n    varying vec2 vUv;\n    varying vec3 vPosition;\n    \n    // Noise function\n    float noise(vec2 p) {\n      return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    }\n    \n    float smoothNoise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      f = f * f * (3.0 - 2.0 * f);\n      \n      float a = noise(i);\n      float b = noise(i + vec2(1.0, 0.0));\n      float c = noise(i + vec2(0.0, 1.0));\n      float d = noise(i + vec2(1.0, 1.0));\n      \n      return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n    }\n    \n    float fractalNoise(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for (int i = 0; i < 6; i++) {\n        value += amplitude * smoothNoise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      vec2 uv = vUv;\n      \n      // Create fire shape\n      float fireShape = 1.0 - smoothstep(0.0, 0.5, length(uv - vec2(0.5, 0.0)));\n      fireShape *= smoothstep(0.0, 0.1, uv.y);\n      fireShape *= smoothstep(1.0, 0.7, uv.y);\n      \n      // Animated noise for fire movement\n      vec2 noiseUv = uv * 3.0;\n      noiseUv.y -= time * fireSpeed;\n      noiseUv.x += sin(uv.y * 10.0 + time * 2.0) * 0.1;\n      \n      float noise1 = fractalNoise(noiseUv);\n      float noise2 = fractalNoise(noiseUv * 2.0 + vec2(100.0));\n      \n      // Combine noises\n      float fireNoise = noise1 * 0.7 + noise2 * 0.3;\n      fireNoise = smoothstep(0.3, 0.8, fireNoise);\n      \n      // Apply fire shape\n      float fire = fireShape * fireNoise * fireIntensity;\n      \n      // Fire colors\n      vec3 fireColor1 = vec3(1.0, 0.1, 0.0);  // Red\n      vec3 fireColor2 = vec3(1.0, 0.5, 0.0);  // Orange\n      vec3 fireColor3 = vec3(1.0, 1.0, 0.2);  // Yellow\n      \n      // Color gradient based on height and intensity\n      vec3 color = mix(fireColor1, fireColor2, uv.y);\n      color = mix(color, fireColor3, fire * uv.y);\n      \n      // Add some blue at the base\n      if (uv.y < 0.2) {\n        color = mix(vec3(0.0, 0.2, 1.0), color, uv.y * 5.0);\n      }\n      \n      gl_FragColor = vec4(color, fire);\n    }\n  `\n}\n\n// Edge detection shader\nconst edgeDetectionShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    resolution: { value: new THREE.Vector2() },\n    edgeThreshold: { value: 0.1 },\n    edgeColor: { value: new THREE.Color(0, 1, 1) }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    \n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec2 resolution;\n    uniform float edgeThreshold;\n    uniform vec3 edgeColor;\n    \n    varying vec2 vUv;\n    \n    void main() {\n      vec2 texel = 1.0 / resolution;\n      \n      // Sample surrounding pixels\n      float tl = length(texture2D(tDiffuse, vUv + vec2(-texel.x, -texel.y)).rgb);\n      float tm = length(texture2D(tDiffuse, vUv + vec2(0.0, -texel.y)).rgb);\n      float tr = length(texture2D(tDiffuse, vUv + vec2(texel.x, -texel.y)).rgb);\n      float ml = length(texture2D(tDiffuse, vUv + vec2(-texel.x, 0.0)).rgb);\n      float mm = length(texture2D(tDiffuse, vUv).rgb);\n      float mr = length(texture2D(tDiffuse, vUv + vec2(texel.x, 0.0)).rgb);\n      float bl = length(texture2D(tDiffuse, vUv + vec2(-texel.x, texel.y)).rgb);\n      float bm = length(texture2D(tDiffuse, vUv + vec2(0.0, texel.y)).rgb);\n      float br = length(texture2D(tDiffuse, vUv + vec2(texel.x, texel.y)).rgb);\n      \n      // Sobel edge detection\n      float gx = -tl - 2.0 * ml - bl + tr + 2.0 * mr + br;\n      float gy = -tl - 2.0 * tm - tr + bl + 2.0 * bm + br;\n      \n      float edge = sqrt(gx * gx + gy * gy);\n      \n      vec3 originalColor = texture2D(tDiffuse, vUv).rgb;\n      \n      if (edge > edgeThreshold) {\n        gl_FragColor = vec4(edgeColor, 1.0);\n      } else {\n        gl_FragColor = vec4(originalColor * 0.3, 1.0);\n      }\n    }\n  `\n}\n\n// Water plane component\nfunction WaterPlane({ shaderUniforms }) {\n  const meshRef = useRef()\n  \n  const material = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      ...waterShader,\n      transparent: true,\n      side: THREE.DoubleSide\n    })\n  }, [])\n  \n  useFrame((state) => {\n    if (material) {\n      material.uniforms.time.value = state.clock.elapsedTime\n      material.uniforms.waveSpeed.value = shaderUniforms.waveSpeed\n      material.uniforms.waveAmplitude.value = shaderUniforms.waveAmplitude\n      material.uniforms.waveFrequency.value = shaderUniforms.waveFrequency\n    }\n  })\n  \n  return (\n    <mesh ref={meshRef} rotation={[-Math.PI / 2, 0, 0]}>\n      <planeGeometry args={[10, 10, 64, 64]} />\n      <primitive object={material} />\n    </mesh>\n  )\n}\n\n// Fire plane component\nfunction FirePlane({ shaderUniforms }) {\n  const meshRef = useRef()\n  \n  const material = useMemo(() => {\n    return new THREE.ShaderMaterial({\n      ...fireShader,\n      transparent: true,\n      side: THREE.DoubleSide,\n      blending: THREE.AdditiveBlending\n    })\n  }, [])\n  \n  useFrame((state) => {\n    if (material) {\n      material.uniforms.time.value = state.clock.elapsedTime\n      material.uniforms.fireIntensity.value = shaderUniforms.fireIntensity\n      material.uniforms.fireSpeed.value = shaderUniforms.fireSpeed\n    }\n  })\n  \n  return (\n    <mesh ref={meshRef}>\n      <planeGeometry args={[2, 3, 32, 32]} />\n      <primitive object={material} />\n    </mesh>\n  )\n}\n\n// Scene objects for edge detection\nfunction SceneObjects() {\n  return (\n    <>\n      <mesh position={[-2, 0, 0]}>\n        <boxGeometry args={[1, 1, 1]} />\n        <meshStandardMaterial color=\"#ff6b6b\" />\n      </mesh>\n      \n      <mesh position={[0, 0, 0]}>\n        <sphereGeometry args={[0.7, 32, 32]} />\n        <meshStandardMaterial color=\"#4ecdc4\" />\n      </mesh>\n      \n      <mesh position={[2, 0, 0]}>\n        <coneGeometry args={[0.7, 1.5, 8]} />\n        <meshStandardMaterial color=\"#45b7d1\" />\n      </mesh>\n    </>\n  )\n}\n\nfunction Scene() {\n  const {\n    shaderType,\n    waveSpeed,\n    waveAmplitude,\n    waveFrequency,\n    fireIntensity,\n    fireSpeed,\n    edgeThreshold\n  } = useControls('着色器控制', {\n    shaderType: {\n      value: 'water',\n      options: {\n        '水波': 'water',\n        '火焰': 'fire',\n        '边缘检测': 'edge'\n      }\n    },\n    waveSpeed: { value: 1.0, min: 0.1, max: 3.0, step: 0.1 },\n    waveAmplitude: { value: 0.1, min: 0.01, max: 0.5, step: 0.01 },\n    waveFrequency: { value: 4.0, min: 1.0, max: 10.0, step: 0.5 },\n    fireIntensity: { value: 1.0, min: 0.1, max: 2.0, step: 0.1 },\n    fireSpeed: { value: 1.0, min: 0.1, max: 3.0, step: 0.1 },\n    edgeThreshold: { value: 0.1, min: 0.01, max: 0.5, step: 0.01 }\n  })\n  \n  const shaderUniforms = {\n    waveSpeed,\n    waveAmplitude,\n    waveFrequency,\n    fireIntensity,\n    fireSpeed,\n    edgeThreshold\n  }\n  \n  return (\n    <>\n      {/* Lighting */}\n      <ambientLight intensity={0.3} />\n      <directionalLight position={[10, 10, 5]} intensity={0.7} />\n      \n      {/* Shader demonstrations */}\n      {shaderType === 'water' && (\n        <WaterPlane shaderUniforms={shaderUniforms} />\n      )}\n      \n      {shaderType === 'fire' && (\n        <FirePlane shaderUniforms={shaderUniforms} />\n      )}\n      \n      {shaderType === 'edge' && (\n        <SceneObjects />\n      )}\n      \n      {/* Ground reference */}\n      {shaderType !== 'water' && (\n        <mesh position={[0, -2, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n          <planeGeometry args={[20, 20]} />\n          <meshStandardMaterial color=\"#2c3e50\" />\n        </mesh>\n      )}\n      \n      {/* Title */}\n      <Text\n        position={[0, 4, 0]}\n        fontSize={1}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        着色器实验\n      </Text>\n      \n      {/* Shader info */}\n      <Text\n        position={[0, 3, 0]}\n        fontSize={0.4}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        当前着色器: {{\n          water: '水波模拟',\n          fire: '火焰效果',\n          edge: '边缘检测'\n        }[shaderType]}\n      </Text>\n    </>\n  )\n}\n\nfunction ShaderExperiments() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          camera={{ position: [0, 3, 8], fov: 75 }}\n          gl={{ antialias: true }}\n        >\n          <Suspense fallback={null}>\n            <Scene />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={3}\n              maxDistance={20}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          🧪 着色器实验\n        </InfoTitle>\n        \n        <InfoDescription>\n          着色器是GPU编程的核心，通过GLSL（OpenGL Shading Language）可以创建各种复杂的视觉效果，从简单的颜色变化到复杂的物理模拟。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>着色器类型</h3>\n        <TechList>\n          <li><code>Vertex Shader</code> - 顶点着色器，处理顶点变换</li>\n          <li><code>Fragment Shader</code> - 片段着色器，处理像素颜色</li>\n          <li><code>Geometry Shader</code> - 几何着色器，生成新几何体</li>\n          <li><code>Compute Shader</code> - 计算着色器，通用GPU计算</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>GLSL基础</h3>\n        <TechList>\n          <li><code>vec2/vec3/vec4</code> - 向量类型</li>\n          <li><code>mat2/mat3/mat4</code> - 矩阵类型</li>\n          <li><code>sampler2D</code> - 纹理采样器</li>\n          <li><code>uniform</code> - 全局变量</li>\n          <li><code>varying</code> - 顶点到片段的插值</li>\n          <li><code>attribute</code> - 顶点属性</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>内置函数</h3>\n        <TechList>\n          <li><code>sin/cos/tan</code> - 三角函数</li>\n          <li><code>mix/smoothstep</code> - 插值函数</li>\n          <li><code>dot/cross/normalize</code> - 向量运算</li>\n          <li><code>texture2D</code> - 纹理采样</li>\n          <li><code>fract/floor/ceil</code> - 数学函数</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>效果实现</h3>\n        <TechList>\n          <li><code>水波效果</code> - 正弦波形变、法线计算、菲涅尔反射</li>\n          <li><code>火焰效果</code> - 分形噪声、颜色渐变、加法混合</li>\n          <li><code>边缘检测</code> - Sobel算子、邻域采样、阈值判断</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>优化技巧</h3>\n        <InfoDescription>\n          • 减少分支语句（if/else）<br/>\n          • 使用内置函数而非自定义<br/>\n          • 预计算常量值<br/>\n          • 合理使用精度修饰符<br/>\n          • 避免在片段着色器中进行复杂计算\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 水波着色器示例\n// Vertex Shader\nvarying vec2 vUv;\nvarying vec3 vPosition;\n\nvoid main() {\n  vUv = uv;\n  \n  vec3 pos = position;\n  \n  // 创建波浪位移\n  float wave = sin(pos.x * 4.0 + time) * 0.1;\n  pos.y += wave;\n  \n  vPosition = pos;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n\n// Fragment Shader\nuniform float time;\nuniform vec3 waterColor;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\n\nvoid main() {\n  vec2 uv = vUv;\n  \n  // 动画水纹理\n  vec2 wave1 = vec2(\n    sin(uv.x * 10.0 + time),\n    cos(uv.y * 10.0 + time)\n  ) * 0.02;\n  \n  vec2 distortedUv = uv + wave1;\n  \n  // 菲涅尔效果\n  vec3 viewDir = normalize(cameraPosition - vPosition);\n  float fresnel = pow(1.0 - dot(normal, viewDir), 2.0);\n  \n  vec3 color = mix(waterColor, vec3(0.8, 0.9, 1.0), fresnel);\n  \n  gl_FragColor = vec4(color, 0.8);\n}\n\n// 火焰着色器噪声函数\nfloat noise(vec2 p) {\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat fractalNoise(vec2 p) {\n  float value = 0.0;\n  float amplitude = 0.5;\n  \n  for (int i = 0; i < 6; i++) {\n    value += amplitude * noise(p);\n    p *= 2.0;\n    amplitude *= 0.5;\n  }\n  \n  return value;\n}\n\n// 边缘检测Sobel算子\nvec2 texel = 1.0 / resolution;\n\n// 采样周围像素\nfloat tl = texture2D(tDiffuse, vUv + vec2(-texel.x, -texel.y)).r;\nfloat tm = texture2D(tDiffuse, vUv + vec2(0.0, -texel.y)).r;\nfloat tr = texture2D(tDiffuse, vUv + vec2(texel.x, -texel.y)).r;\n// ... 更多采样点\n\n// Sobel边缘检测\nfloat gx = -tl - 2.0*ml - bl + tr + 2.0*mr + br;\nfloat gy = -tl - 2.0*tm - tr + bl + 2.0*bm + br;\n\nfloat edge = sqrt(gx*gx + gy*gy);`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default ShaderExperiments"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","waterShader","THREE.Vector2","THREE.Color","fireShader","WaterPlane","shaderUniforms","meshRef","useRef","material","useMemo","THREE.ShaderMaterial","THREE.DoubleSide","useFrame","state","jsxs","jsx","FirePlane","THREE.AdditiveBlending","SceneObjects","Fragment","Scene","shaderType","waveSpeed","waveAmplitude","waveFrequency","fireIntensity","fireSpeed","edgeThreshold","useControls","Text","ShaderExperiments","Canvas","Suspense","OrbitControls"],"mappings":"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"}