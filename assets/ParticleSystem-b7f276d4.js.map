{"version":3,"file":"ParticleSystem-b7f276d4.js","sources":["../../src/pages/advanced/ParticleSystem.jsx"],"sourcesContent":["import React, { Suspense, useRef, useMemo } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, Text } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// Fireworks particle system\nfunction Fireworks({ count = 1000 }) {\n  const pointsRef = useRef()\n  const velocitiesRef = useRef()\n  const lifetimesRef = useRef()\n  \n  const { positions, colors, velocities, lifetimes } = useMemo(() => {\n    const positions = new Float32Array(count * 3)\n    const colors = new Float32Array(count * 3)\n    const velocities = new Float32Array(count * 3)\n    const lifetimes = new Float32Array(count)\n    \n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3\n      \n      // Initial position (explosion center)\n      positions[i3] = (Math.random() - 0.5) * 2\n      positions[i3 + 1] = Math.random() * 2 + 3\n      positions[i3 + 2] = (Math.random() - 0.5) * 2\n      \n      // Random velocity for explosion effect\n      velocities[i3] = (Math.random() - 0.5) * 10\n      velocities[i3 + 1] = Math.random() * 5 + 2\n      velocities[i3 + 2] = (Math.random() - 0.5) * 10\n      \n      // Random colors\n      const hue = Math.random()\n      const color = new THREE.Color().setHSL(hue, 1, 0.7)\n      colors[i3] = color.r\n      colors[i3 + 1] = color.g\n      colors[i3 + 2] = color.b\n      \n      // Random lifetime\n      lifetimes[i] = Math.random() * 3 + 1\n    }\n    \n    return { positions, colors, velocities, lifetimes }\n  }, [count])\n  \n  velocitiesRef.current = velocities\n  lifetimesRef.current = lifetimes\n  \n  useFrame((state, delta) => {\n    if (pointsRef.current) {\n      const positions = pointsRef.current.geometry.attributes.position.array\n      const colors = pointsRef.current.geometry.attributes.color.array\n      \n      for (let i = 0; i < count; i++) {\n        const i3 = i * 3\n        \n        // Update position based on velocity\n        positions[i3] += velocitiesRef.current[i3] * delta\n        positions[i3 + 1] += velocitiesRef.current[i3 + 1] * delta\n        positions[i3 + 2] += velocitiesRef.current[i3 + 2] * delta\n        \n        // Apply gravity\n        velocitiesRef.current[i3 + 1] -= 9.8 * delta\n        \n        // Fade out over time\n        lifetimesRef.current[i] -= delta\n        const alpha = Math.max(0, lifetimesRef.current[i] / 3)\n        \n        // Reset particle if lifetime is over\n        if (lifetimesRef.current[i] <= 0) {\n          positions[i3] = (Math.random() - 0.5) * 2\n          positions[i3 + 1] = Math.random() * 2 + 3\n          positions[i3 + 2] = (Math.random() - 0.5) * 2\n          \n          velocitiesRef.current[i3] = (Math.random() - 0.5) * 10\n          velocitiesRef.current[i3 + 1] = Math.random() * 5 + 2\n          velocitiesRef.current[i3 + 2] = (Math.random() - 0.5) * 10\n          \n          lifetimesRef.current[i] = Math.random() * 3 + 1\n          \n          // New random color\n          const hue = Math.random()\n          const color = new THREE.Color().setHSL(hue, 1, 0.7)\n          colors[i3] = color.r\n          colors[i3 + 1] = color.g\n          colors[i3 + 2] = color.b\n        }\n      }\n      \n      pointsRef.current.geometry.attributes.position.needsUpdate = true\n      pointsRef.current.geometry.attributes.color.needsUpdate = true\n    }\n  })\n  \n  return (\n    <points ref={pointsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={count}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={count}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={0.1}\n        sizeAttenuation\n        vertexColors\n        transparent\n        alphaTest={0.001}\n        depthWrite={false}\n        blending={THREE.AdditiveBlending}\n      />\n    </points>\n  )\n}\n\n// Galaxy spiral particle system\nfunction Galaxy({ count = 5000 }) {\n  const pointsRef = useRef()\n  \n  const { positions, colors } = useMemo(() => {\n    const positions = new Float32Array(count * 3)\n    const colors = new Float32Array(count * 3)\n    \n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3\n      \n      // Galaxy spiral pattern\n      const radius = Math.random() * 15\n      const spinAngle = radius * 0.3\n      const branchAngle = (i % 3) * (Math.PI * 2 / 3)\n      \n      const randomX = Math.pow(Math.random(), 3) * (Math.random() < 0.5 ? 1 : -1) * 0.5\n      const randomY = Math.pow(Math.random(), 3) * (Math.random() < 0.5 ? 1 : -1) * 0.5\n      const randomZ = Math.pow(Math.random(), 3) * (Math.random() < 0.5 ? 1 : -1) * 0.5\n      \n      positions[i3] = Math.cos(branchAngle + spinAngle) * radius + randomX\n      positions[i3 + 1] = randomY\n      positions[i3 + 2] = Math.sin(branchAngle + spinAngle) * radius + randomZ\n      \n      // Colors based on distance from center\n      const mixedColor = new THREE.Color()\n      const distance = Math.sqrt(positions[i3] ** 2 + positions[i3 + 2] ** 2)\n      mixedColor.setHSL(0.6 - distance * 0.02, 0.8, 0.6)\n      \n      colors[i3] = mixedColor.r\n      colors[i3 + 1] = mixedColor.g\n      colors[i3 + 2] = mixedColor.b\n    }\n    \n    return { positions, colors }\n  }, [count])\n  \n  useFrame((state) => {\n    if (pointsRef.current) {\n      pointsRef.current.rotation.y = state.clock.elapsedTime * 0.05\n    }\n  })\n  \n  return (\n    <points ref={pointsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={count}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={count}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={0.03}\n        sizeAttenuation\n        vertexColors\n        transparent\n        alphaTest={0.001}\n        depthWrite={false}\n      />\n    </points>\n  )\n}\n\n// Waterfall particle system\nfunction Waterfall({ count = 2000 }) {\n  const pointsRef = useRef()\n  const velocitiesRef = useRef()\n  \n  const { positions, colors, velocities } = useMemo(() => {\n    const positions = new Float32Array(count * 3)\n    const colors = new Float32Array(count * 3)\n    const velocities = new Float32Array(count * 3)\n    \n    for (let i = 0; i < count; i++) {\n      const i3 = i * 3\n      \n      // Start at the top\n      positions[i3] = (Math.random() - 0.5) * 4\n      positions[i3 + 1] = Math.random() * 10 + 5\n      positions[i3 + 2] = (Math.random() - 0.5) * 2\n      \n      // Downward velocity with some randomness\n      velocities[i3] = (Math.random() - 0.5) * 0.5\n      velocities[i3 + 1] = -Math.random() * 3 - 2\n      velocities[i3 + 2] = (Math.random() - 0.5) * 0.5\n      \n      // Blue water colors\n      const blue = 0.3 + Math.random() * 0.4\n      colors[i3] = 0.1\n      colors[i3 + 1] = 0.3 + Math.random() * 0.3\n      colors[i3 + 2] = blue\n    }\n    \n    return { positions, colors, velocities }\n  }, [count])\n  \n  velocitiesRef.current = velocities\n  \n  useFrame((state, delta) => {\n    if (pointsRef.current) {\n      const positions = pointsRef.current.geometry.attributes.position.array\n      \n      for (let i = 0; i < count; i++) {\n        const i3 = i * 3\n        \n        // Update position\n        positions[i3] += velocitiesRef.current[i3] * delta\n        positions[i3 + 1] += velocitiesRef.current[i3 + 1] * delta\n        positions[i3 + 2] += velocitiesRef.current[i3 + 2] * delta\n        \n        // Apply gravity\n        velocitiesRef.current[i3 + 1] -= 5 * delta\n        \n        // Reset if below ground\n        if (positions[i3 + 1] < -2) {\n          positions[i3] = (Math.random() - 0.5) * 4\n          positions[i3 + 1] = Math.random() * 10 + 5\n          positions[i3 + 2] = (Math.random() - 0.5) * 2\n          \n          velocitiesRef.current[i3] = (Math.random() - 0.5) * 0.5\n          velocitiesRef.current[i3 + 1] = -Math.random() * 3 - 2\n          velocitiesRef.current[i3 + 2] = (Math.random() - 0.5) * 0.5\n        }\n      }\n      \n      pointsRef.current.geometry.attributes.position.needsUpdate = true\n    }\n  })\n  \n  return (\n    <points ref={pointsRef}>\n      <bufferGeometry>\n        <bufferAttribute\n          attach=\"attributes-position\"\n          count={count}\n          array={positions}\n          itemSize={3}\n        />\n        <bufferAttribute\n          attach=\"attributes-color\"\n          count={count}\n          array={colors}\n          itemSize={3}\n        />\n      </bufferGeometry>\n      <pointsMaterial\n        size={0.05}\n        sizeAttenuation\n        vertexColors\n        transparent\n        alphaTest={0.001}\n        depthWrite={false}\n      />\n    </points>\n  )\n}\n\nfunction Scene() {\n  const { \n    particleSystem,\n    particleCount,\n    particleSize,\n    animationSpeed\n  } = useControls('粒子控制', {\n    particleSystem: {\n      value: 'fireworks',\n      options: {\n        '烟花': 'fireworks',\n        '星系': 'galaxy',\n        '瀑布': 'waterfall'\n      }\n    },\n    particleCount: { value: 2000, min: 500, max: 10000, step: 500 },\n    particleSize: { value: 0.05, min: 0.01, max: 0.2, step: 0.01 },\n    animationSpeed: { value: 1, min: 0.1, max: 3, step: 0.1 }\n  })\n  \n  const renderParticleSystem = () => {\n    switch (particleSystem) {\n      case 'fireworks':\n        return <Fireworks count={particleCount} />\n      case 'galaxy':\n        return <Galaxy count={particleCount} />\n      case 'waterfall':\n        return <Waterfall count={particleCount} />\n      default:\n        return <Fireworks count={particleCount} />\n    }\n  }\n  \n  return (\n    <>\n      {renderParticleSystem()}\n      \n      {/* Ground reference */}\n      <mesh position={[0, -2, 0]} receiveShadow>\n        <planeGeometry args={[50, 50]} />\n        <meshStandardMaterial color=\"#2c3e50\" transparent opacity={0.1} />\n      </mesh>\n      \n      {/* Title */}\n      <Text\n        position={[0, 8, 0]}\n        fontSize={1}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        粒子系统演示\n      </Text>\n      \n      {/* System info */}\n      <Text\n        position={[0, 7, 0]}\n        fontSize={0.4}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        当前系统: {{\n          fireworks: '烟花爆炸',\n          galaxy: '螺旋星系',\n          waterfall: '流水瀑布'\n        }[particleSystem]}\n      </Text>\n    </>\n  )\n}\n\nfunction ParticleSystem() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          camera={{ position: [0, 5, 15], fov: 75 }}\n          gl={{ antialias: true }}\n        >\n          <Suspense fallback={null}>\n            <Scene />\n            <ambientLight intensity={0.2} />\n            <directionalLight\n              position={[10, 10, 5]}\n              intensity={0.5}\n            />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={5}\n              maxDistance={50}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          ✨ 粒子系统\n        </InfoTitle>\n        \n        <InfoDescription>\n          粒子系统是创建复杂视觉效果的强大工具，可以模拟火焰、烟雾、爆炸、雨雪等自然现象。Three.js 提供了灵活的粒子系统实现方式。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>粒子系统类型</h3>\n        <TechList>\n          <li><code>烟花系统</code> - 爆炸效果，重力影响，生命周期</li>\n          <li><code>星系系统</code> - 螺旋结构，旋转动画，距离着色</li>\n          <li><code>瀑布系统</code> - 流体模拟，重力下落，循环重生</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>核心组件</h3>\n        <TechList>\n          <li><code>BufferGeometry</code> - 高效的几何体存储</li>\n          <li><code>PointsMaterial</code> - 点材质，支持纹理和颜色</li>\n          <li><code>BufferAttribute</code> - 顶点属性（位置、颜色等）</li>\n          <li><code>Points</code> - 点云渲染对象</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>优化技巧</h3>\n        <TechList>\n          <li><code>sizeAttenuation</code> - 距离衰减，增强深度感</li>\n          <li><code>alphaTest</code> - 透明度测试，提高性能</li>\n          <li><code>depthWrite</code> - 深度写入控制</li>\n          <li><code>AdditiveBlending</code> - 加法混合，发光效果</li>\n          <li><code>frustumCulled</code> - 视锥体剔除</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>性能考虑</h3>\n        <InfoDescription>\n          • 合理控制粒子数量（1000-10000）<br/>\n          • 使用 BufferGeometry 而非 Geometry<br/>\n          • 避免频繁的几何体重建<br/>\n          • 使用纹理图集减少绘制调用<br/>\n          • 考虑使用 GPU 粒子系统进行大规模计算\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 创建粒子系统\nconst particleCount = 1000\nconst positions = new Float32Array(particleCount * 3)\nconst colors = new Float32Array(particleCount * 3)\nconst velocities = new Float32Array(particleCount * 3)\n\n// 初始化粒子属性\nfor (let i = 0; i < particleCount; i++) {\n  const i3 = i * 3\n  \n  // 位置\n  positions[i3] = (Math.random() - 0.5) * 10\n  positions[i3 + 1] = Math.random() * 5\n  positions[i3 + 2] = (Math.random() - 0.5) * 10\n  \n  // 速度\n  velocities[i3] = (Math.random() - 0.5) * 2\n  velocities[i3 + 1] = Math.random() * 2\n  velocities[i3 + 2] = (Math.random() - 0.5) * 2\n  \n  // 颜色\n  const color = new THREE.Color().setHSL(Math.random(), 1, 0.7)\n  colors[i3] = color.r\n  colors[i3 + 1] = color.g\n  colors[i3 + 2] = color.b\n}\n\n// 创建几何体和材质\nconst geometry = new THREE.BufferGeometry()\ngeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3))\ngeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3))\n\nconst material = new THREE.PointsMaterial({\n  size: 0.1,\n  sizeAttenuation: true,\n  vertexColors: true,\n  transparent: true,\n  alphaTest: 0.001,\n  depthWrite: false\n})\n\nconst particles = new THREE.Points(geometry, material)\nscene.add(particles)\n\n// 动画更新\nfunction updateParticles(delta) {\n  const positions = particles.geometry.attributes.position.array\n  \n  for (let i = 0; i < particleCount; i++) {\n    const i3 = i * 3\n    \n    // 更新位置\n    positions[i3] += velocities[i3] * delta\n    positions[i3 + 1] += velocities[i3 + 1] * delta\n    positions[i3 + 2] += velocities[i3 + 2] * delta\n    \n    // 应用重力\n    velocities[i3 + 1] -= 9.8 * delta\n  }\n  \n  particles.geometry.attributes.position.needsUpdate = true\n}`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default ParticleSystem"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","Fireworks","count","pointsRef","useRef","velocitiesRef","lifetimesRef","positions","colors","velocities","lifetimes","useMemo","i","i3","hue","color","THREE.Color","useFrame","state","delta","jsxs","jsx","THREE.AdditiveBlending","Galaxy","radius","spinAngle","branchAngle","randomX","randomY","randomZ","mixedColor","distance","Waterfall","blue","Scene","particleSystem","particleCount","particleSize","animationSpeed","useControls","renderParticleSystem","Fragment","Text","ParticleSystem","Canvas","Suspense","OrbitControls"],"mappings":"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"}