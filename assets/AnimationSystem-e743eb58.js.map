{"version":3,"file":"AnimationSystem-e743eb58.js","sources":["../../src/pages/advanced/AnimationSystem.jsx"],"sourcesContent":["import React, { Suspense, useRef, useMemo, useEffect } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, Text, useAnimations } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// Animated Robot with skeletal animation\nfunction AnimatedRobot({ animationType, animationSpeed }) {\n  const groupRef = useRef()\n  const mixerRef = useRef()\n  \n  // Create a simple robot geometry with bones\n  const robotGeometry = useMemo(() => {\n    const group = new THREE.Group()\n    \n    // Body\n    const bodyGeometry = new THREE.BoxGeometry(1, 1.5, 0.5)\n    const bodyMaterial = new THREE.MeshStandardMaterial({ color: '#4a90e2' })\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial)\n    body.position.y = 0\n    group.add(body)\n    \n    // Head\n    const headGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.8)\n    const headMaterial = new THREE.MeshStandardMaterial({ color: '#5ba3f5' })\n    const head = new THREE.Mesh(headGeometry, headMaterial)\n    head.position.y = 1.15\n    group.add(head)\n    \n    // Arms\n    const armGeometry = new THREE.BoxGeometry(0.3, 1, 0.3)\n    const armMaterial = new THREE.MeshStandardMaterial({ color: '#357abd' })\n    \n    const leftArm = new THREE.Mesh(armGeometry, armMaterial)\n    leftArm.position.set(-0.8, 0.25, 0)\n    leftArm.name = 'leftArm'\n    group.add(leftArm)\n    \n    const rightArm = new THREE.Mesh(armGeometry, armMaterial)\n    rightArm.position.set(0.8, 0.25, 0)\n    rightArm.name = 'rightArm'\n    group.add(rightArm)\n    \n    // Legs\n    const legGeometry = new THREE.BoxGeometry(0.4, 1.2, 0.4)\n    const legMaterial = new THREE.MeshStandardMaterial({ color: '#2c5aa0' })\n    \n    const leftLeg = new THREE.Mesh(legGeometry, legMaterial)\n    leftLeg.position.set(-0.3, -1.35, 0)\n    leftLeg.name = 'leftLeg'\n    group.add(leftLeg)\n    \n    const rightLeg = new THREE.Mesh(legGeometry, legMaterial)\n    rightLeg.position.set(0.3, -1.35, 0)\n    rightLeg.name = 'rightLeg'\n    group.add(rightLeg)\n    \n    return group\n  }, [])\n  \n  // Create animations\n  const animations = useMemo(() => {\n    const clips = []\n    \n    // Walking animation\n    const walkingClip = new THREE.AnimationClip('walking', 2, [\n      // Left arm swing\n      new THREE.VectorKeyframeTrack(\n        'leftArm.rotation[x]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, Math.PI / 4, 0, -Math.PI / 4, 0]\n      ),\n      // Right arm swing\n      new THREE.VectorKeyframeTrack(\n        'rightArm.rotation[x]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, -Math.PI / 4, 0, Math.PI / 4, 0]\n      ),\n      // Left leg movement\n      new THREE.VectorKeyframeTrack(\n        'leftLeg.rotation[x]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, -Math.PI / 6, 0, Math.PI / 6, 0]\n      ),\n      // Right leg movement\n      new THREE.VectorKeyframeTrack(\n        'rightLeg.rotation[x]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, Math.PI / 6, 0, -Math.PI / 6, 0]\n      )\n    ])\n    \n    // Waving animation\n    const wavingClip = new THREE.AnimationClip('waving', 1, [\n      new THREE.VectorKeyframeTrack(\n        'rightArm.rotation[z]',\n        [0, 0.25, 0.5, 0.75, 1],\n        [0, Math.PI / 3, Math.PI / 6, Math.PI / 3, 0]\n      ),\n      new THREE.VectorKeyframeTrack(\n        'rightArm.rotation[x]',\n        [0, 0.25, 0.5, 0.75, 1],\n        [0, Math.PI / 6, 0, Math.PI / 6, 0]\n      )\n    ])\n    \n    // Dancing animation\n    const dancingClip = new THREE.AnimationClip('dancing', 2, [\n      // Body rotation\n      new THREE.VectorKeyframeTrack(\n        '.rotation[y]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, Math.PI / 4, 0, -Math.PI / 4, 0]\n      ),\n      // Arms up and down\n      new THREE.VectorKeyframeTrack(\n        'leftArm.rotation[z]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, Math.PI / 2, 0, Math.PI / 2, 0]\n      ),\n      new THREE.VectorKeyframeTrack(\n        'rightArm.rotation[z]',\n        [0, 0.5, 1, 1.5, 2],\n        [0, -Math.PI / 2, 0, -Math.PI / 2, 0]\n      )\n    ])\n    \n    clips.push(walkingClip, wavingClip, dancingClip)\n    return clips\n  }, [])\n  \n  useEffect(() => {\n    if (groupRef.current) {\n      mixerRef.current = new THREE.AnimationMixer(groupRef.current)\n      \n      // Add all animations to the mixer\n      animations.forEach(clip => {\n        const action = mixerRef.current.clipAction(clip)\n        if (clip.name === animationType) {\n          action.play()\n        }\n      })\n    }\n    \n    return () => {\n      if (mixerRef.current) {\n        mixerRef.current.stopAllAction()\n      }\n    }\n  }, [animations, animationType])\n  \n  useFrame((state, delta) => {\n    if (mixerRef.current) {\n      mixerRef.current.update(delta * animationSpeed)\n    }\n  })\n  \n  return (\n    <group ref={groupRef}>\n      <primitive object={robotGeometry} />\n    </group>\n  )\n}\n\n// Path animation component\nfunction PathAnimation({ pathType, animationSpeed }) {\n  const sphereRef = useRef()\n  const pathRef = useRef()\n  \n  const { curve, pathPoints } = useMemo(() => {\n    let curve\n    \n    switch (pathType) {\n      case 'circle':\n        curve = new THREE.EllipseCurve(\n          0, 0,\n          3, 3,\n          0, 2 * Math.PI,\n          false,\n          0\n        )\n        break\n      case 'figure8':\n        const points = []\n        for (let i = 0; i <= 100; i++) {\n          const t = (i / 100) * Math.PI * 2\n          const x = 3 * Math.sin(t)\n          const y = 1.5 * Math.sin(2 * t)\n          const z = 0\n          points.push(new THREE.Vector3(x, y, z))\n        }\n        curve = new THREE.CatmullRomCurve3(points, true)\n        break\n      case 'spiral':\n        const spiralPoints = []\n        for (let i = 0; i <= 200; i++) {\n          const t = (i / 200) * Math.PI * 4\n          const radius = 3 - (i / 200) * 2\n          const x = radius * Math.cos(t)\n          const y = (i / 200) * 4 - 2\n          const z = radius * Math.sin(t)\n          spiralPoints.push(new THREE.Vector3(x, y, z))\n        }\n        curve = new THREE.CatmullRomCurve3(spiralPoints, false)\n        break\n      default:\n        curve = new THREE.EllipseCurve(0, 0, 3, 3, 0, 2 * Math.PI, false, 0)\n    }\n    \n    const pathPoints = curve.getPoints(200)\n    return { curve, pathPoints }\n  }, [pathType])\n  \n  useFrame((state) => {\n    if (sphereRef.current && curve) {\n      const time = (state.clock.elapsedTime * animationSpeed * 0.1) % 1\n      \n      if (pathType === 'circle') {\n        const point = curve.getPoint(time)\n        sphereRef.current.position.set(point.x, 2, point.y)\n      } else {\n        const point = curve.getPoint(time)\n        sphereRef.current.position.copy(point)\n        \n        // Look ahead for orientation\n        const lookAheadTime = (time + 0.01) % 1\n        const lookAheadPoint = curve.getPoint(lookAheadTime)\n        sphereRef.current.lookAt(lookAheadPoint)\n      }\n    }\n  })\n  \n  return (\n    <group>\n      {/* Moving sphere */}\n      <mesh ref={sphereRef}>\n        <sphereGeometry args={[0.2]} />\n        <meshStandardMaterial color=\"#ff6b6b\" emissive=\"#ff6b6b\" emissiveIntensity={0.2} />\n      </mesh>\n      \n      {/* Path visualization */}\n      <line ref={pathRef}>\n        <bufferGeometry>\n          <bufferAttribute\n            attach=\"attributes-position\"\n            count={pathPoints.length}\n            array={new Float32Array(pathPoints.flatMap(p => pathType === 'circle' ? [p.x, 2, p.y] : [p.x, p.y, p.z]))}\n            itemSize={3}\n          />\n        </bufferGeometry>\n        <lineBasicMaterial color=\"#00ffff\" transparent opacity={0.5} />\n      </line>\n    </group>\n  )\n}\n\nfunction Scene() {\n  const {\n    showRobot,\n    robotAnimation,\n    showPath,\n    pathType,\n    animationSpeed\n  } = useControls('动画控制', {\n    showRobot: { value: true, label: '显示机器人' },\n    robotAnimation: {\n      value: 'walking',\n      options: {\n        '行走': 'walking',\n        '挥手': 'waving',\n        '跳舞': 'dancing'\n      },\n      label: '机器人动画'\n    },\n    showPath: { value: true, label: '显示路径动画' },\n    pathType: {\n      value: 'circle',\n      options: {\n        '圆形': 'circle',\n        '8字形': 'figure8',\n        '螺旋': 'spiral'\n      },\n      label: '路径类型'\n    },\n    animationSpeed: { value: 1, min: 0.1, max: 3, step: 0.1, label: '动画速度' }\n  })\n  \n  return (\n    <>\n      {/* Ground */}\n      <mesh position={[0, -2.5, 0]} receiveShadow>\n        <planeGeometry args={[20, 20]} />\n        <meshStandardMaterial color=\"#2c3e50\" />\n      </mesh>\n      \n      {/* Robot */}\n      {showRobot && (\n        <group position={[-3, 0, 0]}>\n          <AnimatedRobot \n            animationType={robotAnimation} \n            animationSpeed={animationSpeed}\n          />\n        </group>\n      )}\n      \n      {/* Path Animation */}\n      {showPath && (\n        <group position={[3, 0, 0]}>\n          <PathAnimation \n            pathType={pathType} \n            animationSpeed={animationSpeed}\n          />\n        </group>\n      )}\n      \n      {/* Title */}\n      <Text\n        position={[0, 6, 0]}\n        fontSize={1}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        动画系统演示\n      </Text>\n      \n      {/* Info text */}\n      <Text\n        position={[-3, 3, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        骨骼动画: {{\n          walking: '行走循环',\n          waving: '挥手动作',\n          dancing: '跳舞动作'\n        }[robotAnimation]}\n      </Text>\n      \n      <Text\n        position={[3, 3, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        路径动画: {{\n          circle: '圆形轨道',\n          figure8: '8字轨道',\n          spiral: '螺旋轨道'\n        }[pathType]}\n      </Text>\n    </>\n  )\n}\n\nfunction AnimationSystem() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          camera={{ position: [0, 5, 10], fov: 75 }}\n          shadows\n          gl={{ antialias: true }}\n        >\n          <Suspense fallback={null}>\n            <Scene />\n            <ambientLight intensity={0.4} />\n            <directionalLight\n              position={[10, 10, 5]}\n              intensity={0.8}\n              castShadow\n              shadow-mapSize={[2048, 2048]}\n            />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={5}\n              maxDistance={30}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          🎬 动画系统\n        </InfoTitle>\n        \n        <InfoDescription>\n          Three.js 提供了强大的动画系统，支持骨骼动画、变形动画、路径动画等多种动画类型，可以创建复杂的动态效果。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>动画类型</h3>\n        <TechList>\n          <li><code>骨骼动画</code> - 基于骨骼系统的角色动画</li>\n          <li><code>变形动画</code> - 顶点位置的直接变化</li>\n          <li><code>路径动画</code> - 沿着曲线路径的运动</li>\n          <li><code>属性动画</code> - 对象属性的插值变化</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>核心组件</h3>\n        <TechList>\n          <li><code>AnimationMixer</code> - 动画混合器，管理多个动画</li>\n          <li><code>AnimationClip</code> - 动画片段，包含关键帧数据</li>\n          <li><code>AnimationAction</code> - 动画动作，控制播放状态</li>\n          <li><code>KeyframeTrack</code> - 关键帧轨道，存储动画数据</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>轨道类型</h3>\n        <TechList>\n          <li><code>VectorKeyframeTrack</code> - 向量关键帧（位置、旋转、缩放）</li>\n          <li><code>QuaternionKeyframeTrack</code> - 四元数关键帧（旋转）</li>\n          <li><code>NumberKeyframeTrack</code> - 数值关键帧（透明度等）</li>\n          <li><code>ColorKeyframeTrack</code> - 颜色关键帧</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>曲线系统</h3>\n        <TechList>\n          <li><code>CatmullRomCurve3</code> - 平滑的3D曲线</li>\n          <li><code>CubicBezierCurve3</code> - 三次贝塞尔曲线</li>\n          <li><code>EllipseCurve</code> - 椭圆曲线</li>\n          <li><code>SplineCurve</code> - 样条曲线</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>动画控制</h3>\n        <InfoDescription>\n          • 播放控制：play(), stop(), pause()<br/>\n          • 混合权重：setEffectiveWeight()<br/>\n          • 时间缩放：setEffectiveTimeScale()<br/>\n          • 循环模式：setLoop()<br/>\n          • 淡入淡出：fadeIn(), fadeOut(), crossFadeTo()\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 创建动画混合器\nconst mixer = new THREE.AnimationMixer(model)\n\n// 创建动画片段\nconst walkClip = new THREE.AnimationClip('walk', 2, [\n  // 位置轨道\n  new THREE.VectorKeyframeTrack(\n    'bone.position',\n    [0, 0.5, 1, 1.5, 2],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0]\n  ),\n  // 旋转轨道\n  new THREE.QuaternionKeyframeTrack(\n    'bone.quaternion',\n    [0, 1, 2],\n    [0, 0, 0, 1, 0, 0, 0.7071, 0.7071, 0, 0, 0, 1]\n  )\n])\n\n// 创建动画动作\nconst walkAction = mixer.clipAction(walkClip)\nwalkAction.play()\n\n// 路径动画\nconst curve = new THREE.CatmullRomCurve3([\n  new THREE.Vector3(-5, 0, 0),\n  new THREE.Vector3(0, 3, 0),\n  new THREE.Vector3(5, 0, 0),\n  new THREE.Vector3(0, -3, 0)\n], true)\n\n// 沿路径移动\nfunction animateAlongPath(t) {\n  const point = curve.getPoint(t % 1)\n  object.position.copy(point)\n  \n  // 计算朝向\n  const tangent = curve.getTangent(t % 1)\n  object.lookAt(object.position.clone().add(tangent))\n}\n\n// 动画循环\nfunction animate() {\n  const delta = clock.getDelta()\n  mixer.update(delta)\n  \n  const time = clock.getElapsedTime()\n  animateAlongPath(time * 0.1)\n  \n  renderer.render(scene, camera)\n  requestAnimationFrame(animate)\n}`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default AnimationSystem"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","AnimatedRobot","animationType","animationSpeed","groupRef","useRef","mixerRef","robotGeometry","useMemo","group","THREE.Group","bodyGeometry","THREE.BoxGeometry","bodyMaterial","THREE.MeshStandardMaterial","body","THREE.Mesh","headGeometry","headMaterial","head","armGeometry","armMaterial","leftArm","rightArm","legGeometry","legMaterial","leftLeg","rightLeg","animations","clips","walkingClip","THREE.AnimationClip","THREE.VectorKeyframeTrack","wavingClip","dancingClip","useEffect","THREE.AnimationMixer","clip","action","useFrame","state","delta","jsx","PathAnimation","pathType","sphereRef","pathRef","curve","pathPoints","THREE.EllipseCurve","points","i","t","y","z","THREE.Vector3","THREE.CatmullRomCurve3","spiralPoints","radius","x","time","point","lookAheadTime","lookAheadPoint","jsxs","p","Scene","showRobot","robotAnimation","showPath","useControls","Fragment","Text","AnimationSystem","Canvas","Suspense","OrbitControls"],"mappings":"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"}