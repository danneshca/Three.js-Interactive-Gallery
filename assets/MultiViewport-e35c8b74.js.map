{"version":3,"file":"MultiViewport-e35c8b74.js","sources":["../../src/pages/experiments/MultiViewport.jsx"],"sourcesContent":["import React, { Suspense, useRef, useState, useEffect, useMemo, useCallback } from 'react'\nimport { Canvas, useFrame, useThree, createPortal } from '@react-three/fiber'\nimport { OrbitControls, Text, Box, Sphere, Cylinder, PerspectiveCamera, OrthographicCamera } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n  display: grid;\n  grid-template-columns: 2fr 1fr;\n  grid-template-rows: 2fr 1fr;\n  gap: 2px;\n  background: #000;\n`\n\nconst ViewportContainer = styled.div`\n  position: relative;\n  overflow: hidden;\n  border: 2px solid ${props => props.active ? 'var(--accent-color)' : 'rgba(255, 255, 255, 0.2)'};\n  transition: border-color 0.3s ease;\n  \n  &:hover {\n    border-color: var(--accent-color);\n  }\n  \n  canvas {\n    width: 100% !important;\n    height: 100% !important;\n  }\n`\n\nconst ViewportLabel = styled.div`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  background: rgba(0, 0, 0, 0.7);\n  color: var(--accent-color);\n  padding: 0.5rem;\n  border-radius: 4px;\n  font-size: 0.8rem;\n  font-weight: 600;\n  z-index: 10;\n  pointer-events: none;\n`\n\nconst ViewportStats = styled.div`\n  position: absolute;\n  bottom: 10px;\n  left: 10px;\n  background: rgba(0, 0, 0, 0.7);\n  color: var(--text-secondary);\n  padding: 0.5rem;\n  border-radius: 4px;\n  font-size: 0.7rem;\n  z-index: 10;\n  pointer-events: none;\n  \n  .stat-line {\n    margin-bottom: 0.2rem;\n    \n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// 动态场景对象\nfunction AnimatedCube({ position, color, speed = 1 }) {\n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.x = state.clock.elapsedTime * speed\n      meshRef.current.rotation.y = state.clock.elapsedTime * speed * 0.7\n      meshRef.current.position.y = position[1] + Math.sin(state.clock.elapsedTime * 2) * 0.5\n    }\n  })\n  \n  return (\n    <Box ref={meshRef} position={position} args={[1, 1, 1]}>\n      <meshStandardMaterial color={color} />\n    </Box>\n  )\n}\n\nfunction AnimatedSphere({ position, color, speed = 1 }) {\n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.position.x = position[0] + Math.cos(state.clock.elapsedTime * speed) * 2\n      meshRef.current.position.z = position[2] + Math.sin(state.clock.elapsedTime * speed) * 2\n      meshRef.current.scale.setScalar(1 + Math.sin(state.clock.elapsedTime * 3) * 0.2)\n    }\n  })\n  \n  return (\n    <Sphere ref={meshRef} position={position} args={[0.5, 32, 32]}>\n      <meshStandardMaterial color={color} emissive={color} emissiveIntensity={0.2} />\n    </Sphere>\n  )\n}\n\nfunction AnimatedCylinder({ position, color, speed = 1 }) {\n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.z = state.clock.elapsedTime * speed\n      meshRef.current.position.y = position[1] + Math.cos(state.clock.elapsedTime * 1.5) * 1\n    }\n  })\n  \n  return (\n    <Cylinder ref={meshRef} position={position} args={[0.3, 0.3, 2, 8]}>\n      <meshStandardMaterial color={color} wireframe />\n    </Cylinder>\n  )\n}\n\n// 共享场景内容\nfunction SharedScene() {\n  const {\n    animationSpeed,\n    showWireframe,\n    lightIntensity\n  } = useControls('场景设置', {\n    animationSpeed: { value: 1, min: 0, max: 3, step: 0.1, label: '动画速度' },\n    showWireframe: { value: false, label: '线框模式' },\n    lightIntensity: { value: 0.6, min: 0, max: 2, step: 0.1, label: '光照强度' }\n  })\n  \n  return (\n    <>\n      {/* 动态对象 */}\n      <AnimatedCube position={[-3, 0, 0]} color=\"#ff6b6b\" speed={animationSpeed} />\n      <AnimatedCube position={[3, 0, 0]} color=\"#4ecdc4\" speed={animationSpeed * 0.8} />\n      <AnimatedCube position={[0, 3, 0]} color=\"#45b7d1\" speed={animationSpeed * 1.2} />\n      \n      <AnimatedSphere position={[-2, -2, 2]} color=\"#96ceb4\" speed={animationSpeed} />\n      <AnimatedSphere position={[2, -2, 2]} color=\"#feca57\" speed={animationSpeed * 0.6} />\n      <AnimatedSphere position={[0, -2, -2]} color=\"#ff9ff3\" speed={animationSpeed * 1.4} />\n      \n      <AnimatedCylinder position={[0, 0, 3]} color=\"#54a0ff\" speed={animationSpeed} />\n      <AnimatedCylinder position={[0, 0, -3]} color=\"#5f27cd\" speed={animationSpeed * 0.9} />\n      \n      {/* 地面 */}\n      <Box position={[0, -4, 0]} args={[20, 0.1, 20]}>\n        <meshStandardMaterial \n          color=\"#2c2c2c\" \n          wireframe={showWireframe}\n        />\n      </Box>\n      \n      {/* 背景网格 */}\n      {Array.from({ length: 10 }, (_, i) => (\n        <group key={i}>\n          <Box position={[i * 2 - 10, -3.9, 0]} args={[0.05, 0.2, 20]}>\n            <meshBasicMaterial color=\"#444444\" />\n          </Box>\n          <Box position={[0, -3.9, i * 2 - 10]} args={[20, 0.2, 0.05]}>\n            <meshBasicMaterial color=\"#444444\" />\n          </Box>\n        </group>\n      ))}\n      \n      {/* 光照 */}\n      <ambientLight intensity={0.3} />\n      <directionalLight \n        position={[10, 10, 5]} \n        intensity={lightIntensity}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n      <pointLight position={[-10, 5, -10]} color=\"#ff0080\" intensity={0.3} />\n      <pointLight position={[10, 5, 10]} color=\"#0080ff\" intensity={0.3} />\n      \n      {/* 标题 */}\n      <Text\n        position={[0, 6, 0]}\n        fontSize={1.5}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        多视角渲染\n      </Text>\n    </>\n  )\n}\n\n// 主视角统计组件（在Canvas内部）\nfunction MainViewportStats({ onStatsUpdate }) {\n  useFrame((state) => {\n    onStatsUpdate({\n      fps: Math.round(1 / state.clock.getDelta()),\n      triangles: state.gl.info.render.triangles\n    })\n  })\n  return null\n}\n\n// 主视角组件\nfunction MainViewport() {\n  const [stats, setStats] = useState({ fps: 0, triangles: 0 })\n  \n  const handleStatsUpdate = useCallback((newStats) => {\n    setStats(newStats)\n  }, [])\n  \n  return (\n    <ViewportContainer active>\n      <ViewportLabel>主视角 - 透视相机</ViewportLabel>\n      <ViewportStats>\n        <div className=\"stat-line\">FPS: {stats.fps}</div>\n        <div className=\"stat-line\">三角形: {stats.triangles}</div>\n        <div className=\"stat-line\">位置: 自由移动</div>\n      </ViewportStats>\n      <Canvas\n        camera={{ position: [8, 5, 8], fov: 75 }}\n        gl={{ antialias: true }}\n        shadows\n      >\n        <MainViewportStats onStatsUpdate={handleStatsUpdate} />\n        <Suspense fallback={null}>\n          <SharedScene />\n          <OrbitControls\n            enableDamping\n            dampingFactor={0.05}\n            minDistance={3}\n            maxDistance={30}\n          />\n        </Suspense>\n      </Canvas>\n    </ViewportContainer>\n  )\n}\n\n// 顶视图统计组件（在Canvas内部）\nfunction TopViewportStats({ onStatsUpdate }) {\n  useFrame((state) => {\n    onStatsUpdate({\n      zoom: state.camera.zoom?.toFixed(2) || 1,\n      visible: state.scene.children.length\n    })\n  })\n  return null\n}\n\n// 顶视图组件\nfunction TopViewport() {\n  const [stats, setStats] = useState({ zoom: 1, visible: 0 })\n  \n  const handleStatsUpdate = useCallback((newStats) => {\n    setStats(newStats)\n  }, [])\n  \n  return (\n    <ViewportContainer>\n      <ViewportLabel>顶视图 - 正交相机</ViewportLabel>\n      <ViewportStats>\n        <div className=\"stat-line\">缩放: {stats.zoom}x</div>\n        <div className=\"stat-line\">对象: {stats.visible}</div>\n        <div className=\"stat-line\">投影: 正交</div>\n      </ViewportStats>\n      <Canvas\n        orthographic\n        camera={{ position: [0, 20, 0], zoom: 50 }}\n        gl={{ antialias: true }}\n      >\n        <TopViewportStats onStatsUpdate={handleStatsUpdate} />\n        <Suspense fallback={null}>\n          <SharedScene />\n          <OrbitControls\n            enableRotate={false}\n            enableDamping\n            dampingFactor={0.05}\n            minZoom={20}\n            maxZoom={100}\n          />\n        </Suspense>\n      </Canvas>\n    </ViewportContainer>\n  )\n}\n\n// 侧视图统计组件（在Canvas内部）\nfunction SideViewportStats({ onStatsUpdate }) {\n  useFrame((state) => {\n    const camera = state.camera\n    onStatsUpdate({\n      angle: Math.round(Math.atan2(camera.position.z, camera.position.x) * 180 / Math.PI),\n      distance: Math.round(camera.position.length())\n    })\n  })\n  return null\n}\n\n// 侧视图组件\nfunction SideViewport() {\n  const [stats, setStats] = useState({ angle: 0, distance: 0 })\n  \n  const handleStatsUpdate = useCallback((newStats) => {\n    setStats(newStats)\n  }, [])\n  \n  return (\n    <ViewportContainer>\n      <ViewportLabel>侧视图 - 固定角度</ViewportLabel>\n      <ViewportStats>\n        <div className=\"stat-line\">角度: {stats.angle}°</div>\n        <div className=\"stat-line\">距离: {stats.distance}</div>\n        <div className=\"stat-line\">模式: 固定</div>\n      </ViewportStats>\n      <Canvas\n        camera={{ position: [15, 0, 0], fov: 60 }}\n        gl={{ antialias: true }}\n      >\n        <SideViewportStats onStatsUpdate={handleStatsUpdate} />\n        <Suspense fallback={null}>\n          <SharedScene />\n          <OrbitControls\n            enablePan={false}\n            enableZoom={true}\n            enableRotate={false}\n            minDistance={10}\n            maxDistance={25}\n          />\n        </Suspense>\n      </Canvas>\n    </ViewportContainer>\n  )\n}\n\n// 自由视角统计组件（在Canvas内部）\nfunction FreeViewportStats({ onStatsUpdate, cameraMode, fov, zoom }) {\n  useFrame((state) => {\n    onStatsUpdate({\n      mode: cameraMode,\n      fov: cameraMode === 'perspective' ? fov : zoom\n    })\n  })\n  return null\n}\n\n// 自由视角组件\nfunction FreeViewport() {\n  const [cameraMode, setCameraMode] = useState('perspective')\n  const [stats, setStats] = useState({ mode: 'perspective', fov: 75 })\n  \n  const {\n    cameraType,\n    fov,\n    zoom\n  } = useControls('自由视角', {\n    cameraType: {\n      value: 'perspective',\n      options: {\n        '透视相机': 'perspective',\n        '正交相机': 'orthographic'\n      },\n      label: '相机类型'\n    },\n    fov: { value: 75, min: 30, max: 120, step: 5, label: 'FOV' },\n    zoom: { value: 50, min: 10, max: 100, step: 5, label: '正交缩放' }\n  })\n  \n  useEffect(() => {\n    setCameraMode(cameraType)\n  }, [cameraType])\n  \n  const handleStatsUpdate = useCallback((newStats) => {\n    setStats(newStats)\n  }, [])\n  \n  return (\n    <ViewportContainer>\n      <ViewportLabel>自由视角 - 可切换</ViewportLabel>\n      <ViewportStats>\n        <div className=\"stat-line\">模式: {stats.mode}</div>\n        <div className=\"stat-line\">{cameraMode === 'perspective' ? 'FOV' : '缩放'}: {stats.fov}</div>\n        <div className=\"stat-line\">控制: 完全自由</div>\n      </ViewportStats>\n      <Canvas\n        orthographic={cameraMode === 'orthographic'}\n        camera={cameraMode === 'perspective' ? \n          { position: [5, 5, 5], fov: fov } : \n          { position: [5, 5, 5], zoom: zoom }\n        }\n        gl={{ antialias: true }}\n      >\n        <FreeViewportStats \n          onStatsUpdate={handleStatsUpdate} \n          cameraMode={cameraMode} \n          fov={fov} \n          zoom={zoom} \n        />\n        <Suspense fallback={null}>\n          <SharedScene />\n          <OrbitControls\n            enableDamping\n            dampingFactor={0.05}\n            minDistance={2}\n            maxDistance={20}\n          />\n        </Suspense>\n      </Canvas>\n    </ViewportContainer>\n  )\n}\n\nfunction MultiViewport() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <MainViewport />\n        <TopViewport />\n        <SideViewport />\n        <FreeViewport />\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          📱 多视角渲染\n        </InfoTitle>\n        \n        <InfoDescription>\n          多视角渲染技术允许同时从不同角度和投影方式观察同一个3D场景，常用于3D建模软件、游戏开发工具和科学可视化应用。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>视角类型</h3>\n        <TechList>\n          <li><code>主视角</code> - 透视相机，自由移动控制</li>\n          <li><code>顶视图</code> - 正交投影，俯视角度</li>\n          <li><code>侧视图</code> - 固定角度，侧面观察</li>\n          <li><code>自由视角</code> - 可切换相机类型</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>技术特性</h3>\n        <TechList>\n          <li><code>共享场景</code> - 所有视角渲染同一场景</li>\n          <li><code>独立控制</code> - 每个视角独立的相机控制</li>\n          <li><code>实时同步</code> - 场景变化实时反映到所有视角</li>\n          <li><code>性能优化</code> - 智能剔除和LOD管理</li>\n          <li><code>响应式布局</code> - 自适应视口大小</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>相机系统</h3>\n        <TechList>\n          <li><code>透视相机</code> - 模拟人眼视觉，有景深效果</li>\n          <li><code>正交相机</code> - 平行投影，无透视变形</li>\n          <li><code>视锥剔除</code> - 只渲染视野内的对象</li>\n          <li><code>近远裁剪</code> - 控制渲染距离范围</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>应用场景</h3>\n        <InfoDescription>\n          • 3D建模和动画软件<br/>\n          • 游戏关卡编辑器<br/>\n          • 建筑设计可视化<br/>\n          • 医学影像分析<br/>\n          • 工程CAD系统\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>性能优化</h3>\n        <TechList>\n          <li><code>视锥剔除</code> - 剔除视野外的对象</li>\n          <li><code>LOD系统</code> - 根据距离调整细节级别</li>\n          <li><code>实例化渲染</code> - 批量渲染相同对象</li>\n          <li><code>纹理共享</code> - 多视角共享纹理资源</li>\n          <li><code>渲染队列</code> - 优化渲染顺序</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>交互特性</h3>\n        <InfoDescription>\n          • 独立的相机控制器<br/>\n          • 视角间的焦点同步<br/>\n          • 鼠标悬停高亮<br/>\n          • 键盘快捷键切换<br/>\n          • 视角状态保存\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 多视角渲染管理器\nclass MultiViewportRenderer {\n  constructor(container) {\n    this.container = container\n    this.viewports = []\n    this.sharedScene = new THREE.Scene()\n    this.setupViewports()\n  }\n  \n  setupViewports() {\n    // 主视角 - 透视相机\n    this.addViewport({\n      name: 'main',\n      camera: new THREE.PerspectiveCamera(75, 1, 0.1, 1000),\n      position: { x: 0, y: 0, width: 0.7, height: 0.7 },\n      controls: 'orbit'\n    })\n    \n    // 顶视图 - 正交相机\n    this.addViewport({\n      name: 'top',\n      camera: new THREE.OrthographicCamera(-10, 10, 10, -10, 0.1, 1000),\n      position: { x: 0.7, y: 0, width: 0.3, height: 0.35 },\n      controls: 'pan-zoom'\n    })\n    \n    // 侧视图 - 固定角度\n    this.addViewport({\n      name: 'side',\n      camera: new THREE.PerspectiveCamera(60, 1, 0.1, 1000),\n      position: { x: 0.7, y: 0.35, width: 0.3, height: 0.35 },\n      controls: 'fixed'\n    })\n  }\n  \n  addViewport(config) {\n    const viewport = {\n      ...config,\n      renderer: new THREE.WebGLRenderer({ antialias: true }),\n      controls: this.createControls(config.camera, config.controls)\n    }\n    \n    // 设置渲染器\n    viewport.renderer.setSize(\n      this.container.clientWidth * config.position.width,\n      this.container.clientHeight * config.position.height\n    )\n    \n    // 设置相机初始位置\n    this.setCameraPosition(viewport.camera, config.name)\n    \n    this.viewports.push(viewport)\n    this.container.appendChild(viewport.renderer.domElement)\n  }\n  \n  createControls(camera, type) {\n    switch (type) {\n      case 'orbit':\n        return new OrbitControls(camera, this.container)\n      \n      case 'pan-zoom':\n        const controls = new OrbitControls(camera, this.container)\n        controls.enableRotate = false\n        return controls\n      \n      case 'fixed':\n        const fixedControls = new OrbitControls(camera, this.container)\n        fixedControls.enableRotate = false\n        fixedControls.enablePan = false\n        return fixedControls\n      \n      default:\n        return null\n    }\n  }\n  \n  setCameraPosition(camera, viewportName) {\n    switch (viewportName) {\n      case 'main':\n        camera.position.set(8, 5, 8)\n        break\n      \n      case 'top':\n        camera.position.set(0, 20, 0)\n        camera.lookAt(0, 0, 0)\n        break\n      \n      case 'side':\n        camera.position.set(15, 0, 0)\n        camera.lookAt(0, 0, 0)\n        break\n    }\n  }\n  \n  render() {\n    this.viewports.forEach(viewport => {\n      // 设置视口\n      const { position } = viewport\n      const width = this.container.clientWidth * position.width\n      const height = this.container.clientHeight * position.height\n      const left = this.container.clientWidth * position.x\n      const bottom = this.container.clientHeight * (1 - position.y - position.height)\n      \n      viewport.renderer.setViewport(left, bottom, width, height)\n      viewport.renderer.setScissor(left, bottom, width, height)\n      viewport.renderer.setScissorTest(true)\n      \n      // 更新相机宽高比\n      if (viewport.camera.isPerspectiveCamera) {\n        viewport.camera.aspect = width / height\n      } else {\n        const aspect = width / height\n        viewport.camera.left = -10 * aspect\n        viewport.camera.right = 10 * aspect\n      }\n      viewport.camera.updateProjectionMatrix()\n      \n      // 更新控制器\n      if (viewport.controls) {\n        viewport.controls.update()\n      }\n      \n      // 渲染场景\n      viewport.renderer.render(this.sharedScene, viewport.camera)\n    })\n  }\n  \n  resize() {\n    this.viewports.forEach(viewport => {\n      const { position } = viewport\n      const width = this.container.clientWidth * position.width\n      const height = this.container.clientHeight * position.height\n      \n      viewport.renderer.setSize(width, height)\n    })\n  }\n  \n  // 同步所有视角的焦点\n  syncFocus(targetPosition) {\n    this.viewports.forEach(viewport => {\n      if (viewport.controls && viewport.controls.target) {\n        viewport.controls.target.copy(targetPosition)\n        viewport.controls.update()\n      }\n    })\n  }\n  \n  // 获取指定视角的相机\n  getCamera(viewportName) {\n    const viewport = this.viewports.find(v => v.name === viewportName)\n    return viewport ? viewport.camera : null\n  }\n  \n  // 切换视角的相机类型\n  switchCameraType(viewportName, cameraType) {\n    const viewport = this.viewports.find(v => v.name === viewportName)\n    if (!viewport) return\n    \n    const oldCamera = viewport.camera\n    const position = oldCamera.position.clone()\n    const target = viewport.controls?.target?.clone() || new THREE.Vector3()\n    \n    if (cameraType === 'perspective') {\n      viewport.camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000)\n    } else {\n      viewport.camera = new THREE.OrthographicCamera(-10, 10, 10, -10, 0.1, 1000)\n    }\n    \n    viewport.camera.position.copy(position)\n    viewport.camera.lookAt(target)\n    \n    // 重新创建控制器\n    if (viewport.controls) {\n      viewport.controls.dispose()\n      viewport.controls = new OrbitControls(viewport.camera, viewport.renderer.domElement)\n      viewport.controls.target.copy(target)\n    }\n  }\n}\n\n// 使用示例\nconst multiViewport = new MultiViewportRenderer(document.getElementById('container'))\n\n// 添加场景对象\nconst geometry = new THREE.BoxGeometry()\nconst material = new THREE.MeshStandardMaterial({ color: 0xff6b6b })\nconst cube = new THREE.Mesh(geometry, material)\nmultiViewport.sharedScene.add(cube)\n\n// 渲染循环\nfunction animate() {\n  cube.rotation.x += 0.01\n  cube.rotation.y += 0.01\n  \n  multiViewport.render()\n  requestAnimationFrame(animate)\n}\n\nanimate()\n\n// 响应窗口大小变化\nwindow.addEventListener('resize', () => {\n  multiViewport.resize()\n})\n\n// 同步焦点示例\ndocument.addEventListener('click', (event) => {\n  const intersects = raycaster.intersectObjects(multiViewport.sharedScene.children)\n  if (intersects.length > 0) {\n    multiViewport.syncFocus(intersects[0].point)\n  }\n})`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default MultiViewport"],"names":["PageContainer","styled","CanvasContainer","ViewportContainer","props","ViewportLabel","ViewportStats","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","AnimatedCube","position","color","speed","meshRef","useRef","useFrame","state","jsx","Box","AnimatedSphere","Sphere","AnimatedCylinder","Cylinder","SharedScene","animationSpeed","showWireframe","lightIntensity","useControls","jsxs","Fragment","_","i","Text","MainViewportStats","onStatsUpdate","MainViewport","stats","setStats","useState","handleStatsUpdate","useCallback","newStats","Canvas","Suspense","OrbitControls","TopViewportStats","_a","TopViewport","SideViewportStats","camera","SideViewport","FreeViewportStats","cameraMode","fov","zoom","FreeViewport","setCameraMode","cameraType","useEffect","MultiViewport"],"mappings":"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"}