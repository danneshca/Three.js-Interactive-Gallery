{"version":3,"file":"MaterialTexture-353f9d20.js","sources":["../../src/pages/core/MaterialTexture.jsx"],"sourcesContent":["import React, { Suspense, useRef, useMemo } from 'react'\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber'\nimport { OrbitControls, Box, Sphere, Plane, Text, useTexture } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// Generate procedural textures\nfunction createProceduralTexture(type = 'checker') {\n  const canvas = document.createElement('canvas')\n  canvas.width = 512\n  canvas.height = 512\n  const ctx = canvas.getContext('2d')\n  \n  switch (type) {\n    case 'checker':\n      const size = 64\n      for (let x = 0; x < canvas.width; x += size) {\n        for (let y = 0; y < canvas.height; y += size) {\n          ctx.fillStyle = ((x / size) + (y / size)) % 2 ? '#ffffff' : '#000000'\n          ctx.fillRect(x, y, size, size)\n        }\n      }\n      break\n      \n    case 'gradient':\n      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height)\n      gradient.addColorStop(0, '#ff6b6b')\n      gradient.addColorStop(0.5, '#4ecdc4')\n      gradient.addColorStop(1, '#45b7d1')\n      ctx.fillStyle = gradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n      break\n      \n    case 'noise':\n      const imageData = ctx.createImageData(canvas.width, canvas.height)\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const value = Math.random() * 255\n        imageData.data[i] = value     // R\n        imageData.data[i + 1] = value // G\n        imageData.data[i + 2] = value // B\n        imageData.data[i + 3] = 255   // A\n      }\n      ctx.putImageData(imageData, 0, 0)\n      break\n      \n    default:\n      ctx.fillStyle = '#4ecdc4'\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n  }\n  \n  const texture = new THREE.CanvasTexture(canvas)\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  return texture\n}\n\n// Material showcase component\nfunction MaterialSphere({ position, materialType, ...props }) {\n  const meshRef = useRef()\n  \n  const checkerTexture = useMemo(() => createProceduralTexture('checker'), [])\n  const gradientTexture = useMemo(() => createProceduralTexture('gradient'), [])\n  const noiseTexture = useMemo(() => createProceduralTexture('noise'), [])\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.5\n      meshRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.3) * 0.2\n    }\n  })\n  \n  const getMaterial = () => {\n    const baseProps = {\n      transparent: true,\n      opacity: 0.9\n    }\n    \n    switch (materialType) {\n      case 'basic':\n        return <meshBasicMaterial color=\"#ff6b6b\" {...baseProps} />\n        \n      case 'lambert':\n        return <meshLambertMaterial color=\"#4ecdc4\" {...baseProps} />\n        \n      case 'phong':\n        return (\n          <meshPhongMaterial \n            color=\"#45b7d1\" \n            shininess={100}\n            specular=\"#ffffff\"\n            {...baseProps} \n          />\n        )\n        \n      case 'standard':\n        return (\n          <meshStandardMaterial \n            color=\"#2ecc71\"\n            metalness={0.3}\n            roughness={0.4}\n            {...baseProps}\n          />\n        )\n        \n      case 'physical':\n        return (\n          <meshPhysicalMaterial \n            color=\"#9b59b6\"\n            metalness={0.8}\n            roughness={0.2}\n            clearcoat={1.0}\n            clearcoatRoughness={0.1}\n            {...baseProps}\n          />\n        )\n        \n      case 'textured':\n        return (\n          <meshStandardMaterial \n            map={checkerTexture}\n            normalMap={noiseTexture}\n            normalScale={[0.5, 0.5]}\n            {...baseProps}\n          />\n        )\n        \n      case 'emissive':\n        return (\n          <meshStandardMaterial \n            color=\"#2c3e50\"\n            emissive=\"#f39c12\"\n            emissiveIntensity={0.5}\n            {...baseProps}\n          />\n        )\n        \n      case 'wireframe':\n        return (\n          <meshBasicMaterial \n            color=\"#00ffff\"\n            wireframe\n            {...baseProps}\n          />\n        )\n        \n      default:\n        return <meshStandardMaterial color=\"#ffffff\" {...baseProps} />\n    }\n  }\n  \n  return (\n    <Sphere ref={meshRef} position={position} args={[0.8]} {...props}>\n      {getMaterial()}\n    </Sphere>\n  )\n}\n\n// Texture showcase component\nfunction TexturedBox({ position, textureType }) {\n  const meshRef = useRef()\n  \n  const checkerTexture = useMemo(() => createProceduralTexture('checker'), [])\n  const gradientTexture = useMemo(() => createProceduralTexture('gradient'), [])\n  const noiseTexture = useMemo(() => createProceduralTexture('noise'), [])\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.3\n      meshRef.current.rotation.x = state.clock.elapsedTime * 0.2\n    }\n  })\n  \n  const getTexture = () => {\n    switch (textureType) {\n      case 'checker': return checkerTexture\n      case 'gradient': return gradientTexture\n      case 'noise': return noiseTexture\n      default: return null\n    }\n  }\n  \n  const texture = getTexture()\n  if (texture) {\n    texture.repeat.set(2, 2)\n  }\n  \n  return (\n    <Box ref={meshRef} position={position} args={[1, 1, 1]} castShadow>\n      <meshStandardMaterial \n        map={texture}\n        roughness={0.3}\n        metalness={0.1}\n      />\n    </Box>\n  )\n}\n\nfunction Scene() {\n  const { \n    materialType,\n    showTextures,\n    textureRepeat,\n    roughness,\n    metalness\n  } = useControls('材质控制', {\n    materialType: {\n      value: 'standard',\n      options: {\n        '基础材质': 'basic',\n        'Lambert材质': 'lambert',\n        'Phong材质': 'phong',\n        '标准材质': 'standard',\n        '物理材质': 'physical',\n        '纹理材质': 'textured',\n        '发光材质': 'emissive',\n        '线框材质': 'wireframe'\n      }\n    },\n    showTextures: { value: true },\n    textureRepeat: { value: 2, min: 1, max: 8, step: 1 },\n    roughness: { value: 0.4, min: 0, max: 1, step: 0.1 },\n    metalness: { value: 0.3, min: 0, max: 1, step: 0.1 }\n  })\n  \n  return (\n    <>\n      {/* Ground plane */}\n      <Plane \n        args={[20, 20]} \n        rotation={[-Math.PI / 2, 0, 0]} \n        position={[0, -2, 0]}\n        receiveShadow\n      >\n        <meshStandardMaterial color=\"#2c3e50\" roughness={0.8} />\n      </Plane>\n      \n      {/* Material showcase spheres */}\n      <MaterialSphere \n        position={[0, 0, 0]} \n        materialType={materialType}\n        castShadow \n      />\n      \n      {/* Textured boxes */}\n      {showTextures && (\n        <>\n          <TexturedBox position={[-3, 0, 0]} textureType=\"checker\" />\n          <TexturedBox position={[3, 0, 0]} textureType=\"gradient\" />\n          <TexturedBox position={[0, 0, 3]} textureType=\"noise\" />\n        </>\n      )}\n      \n      {/* Additional objects for comparison */}\n      <Box position={[-2, 2, -2]} args={[0.8, 0.8, 0.8]} castShadow>\n        <meshStandardMaterial \n          color=\"#e74c3c\" \n          roughness={roughness}\n          metalness={metalness}\n        />\n      </Box>\n      \n      <Sphere position={[2, 2, -2]} args={[0.6]} castShadow>\n        <meshPhysicalMaterial \n          color=\"#3498db\"\n          metalness={0.9}\n          roughness={0.1}\n          clearcoat={1.0}\n        />\n      </Sphere>\n      \n      {/* Text label */}\n      <Text\n        position={[0, 4, 0]}\n        fontSize={0.8}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        材质与纹理演示\n      </Text>\n    </>\n  )\n}\n\nfunction MaterialTexture() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          shadows\n          camera={{ position: [6, 4, 6], fov: 75 }}\n          gl={{ antialias: true }}\n        >\n          <Suspense fallback={null}>\n            <Scene />\n            <ambientLight intensity={0.3} />\n            <directionalLight\n              position={[10, 10, 5]}\n              intensity={1}\n              castShadow\n              shadow-mapSize-width={2048}\n              shadow-mapSize-height={2048}\n            />\n            <pointLight position={[-10, 5, -10]} intensity={0.5} color=\"#ff6b6b\" />\n            <pointLight position={[10, 5, 10]} intensity={0.5} color=\"#4ecdc4\" />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={3}\n              maxDistance={20}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          🎨 材质与纹理\n        </InfoTitle>\n        \n        <InfoDescription>\n          材质决定了物体表面的视觉特性，包括颜色、反射、透明度等。纹理则为材质提供了更丰富的表面细节。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>材质类型</h3>\n        <TechList>\n          <li><code>MeshBasicMaterial</code> - 不受光照影响的基础材质</li>\n          <li><code>MeshLambertMaterial</code> - 漫反射材质</li>\n          <li><code>MeshPhongMaterial</code> - 支持镜面反射</li>\n          <li><code>MeshStandardMaterial</code> - 基于物理的标准材质</li>\n          <li><code>MeshPhysicalMaterial</code> - 高级物理材质</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>纹理类型</h3>\n        <TechList>\n          <li><code>map</code> - 漫反射贴图（颜色）</li>\n          <li><code>normalMap</code> - 法线贴图（表面细节）</li>\n          <li><code>roughnessMap</code> - 粗糙度贴图</li>\n          <li><code>metalnessMap</code> - 金属度贴图</li>\n          <li><code>emissiveMap</code> - 发光贴图</li>\n          <li><code>envMap</code> - 环境贴图（反射）</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>物理属性</h3>\n        <TechList>\n          <li><code>roughness</code> - 粗糙度 (0=镜面, 1=完全粗糙)</li>\n          <li><code>metalness</code> - 金属度 (0=非金属, 1=金属)</li>\n          <li><code>clearcoat</code> - 透明涂层强度</li>\n          <li><code>transmission</code> - 透射率</li>\n        </TechList>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 标准材质设置\nconst material = new THREE.MeshStandardMaterial({\n  color: 0x2ecc71,\n  roughness: 0.4,\n  metalness: 0.3,\n  map: diffuseTexture,\n  normalMap: normalTexture,\n  roughnessMap: roughnessTexture\n})\n\n// 物理材质设置\nconst physicalMaterial = new THREE.MeshPhysicalMaterial({\n  color: 0x9b59b6,\n  metalness: 0.8,\n  roughness: 0.2,\n  clearcoat: 1.0,\n  clearcoatRoughness: 0.1,\n  transmission: 0.9,\n  thickness: 1.0\n})\n\n// 纹理设置\nconst texture = new THREE.TextureLoader().load('texture.jpg')\ntexture.wrapS = THREE.RepeatWrapping\ntexture.wrapT = THREE.RepeatWrapping\ntexture.repeat.set(2, 2)`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default MaterialTexture"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","createProceduralTexture","type","canvas","ctx","x","y","gradient","imageData","i","value","texture","THREE.CanvasTexture","THREE.RepeatWrapping","MaterialSphere","position","materialType","props","meshRef","useRef","checkerTexture","useMemo","noiseTexture","useFrame","state","getMaterial","baseProps","jsx","Sphere","TexturedBox","textureType","gradientTexture","Box","Scene","showTextures","textureRepeat","roughness","metalness","useControls","jsxs","Fragment","Plane","Text","MaterialTexture","Canvas","Suspense","OrbitControls"],"mappings":"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"}