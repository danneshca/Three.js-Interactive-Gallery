{"version":3,"file":"GeometryShowcase-2258527f.js","sources":["../../src/pages/core/GeometryShowcase.jsx"],"sourcesContent":["import React, { Suspense, useRef, useMemo } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, Text, Line } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport * as THREE from 'three'\n\nconst PageContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: relative;\n  padding-top: 80px;\n`\n\nconst CanvasContainer = styled.div`\n  flex: 1;\n  height: calc(100vh - 80px);\n  position: relative;\n`\n\nconst InfoPanel = styled(motion.div)`\n  width: 350px;\n  background: rgba(26, 26, 26, 0.95);\n  backdrop-filter: blur(20px);\n  border-left: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 2rem;\n  overflow-y: auto;\n  z-index: 100;\n`\n\nconst InfoTitle = styled.h2`\n  color: var(--accent-color);\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n`\n\nconst InfoDescription = styled.p`\n  color: var(--text-secondary);\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n`\n\nconst TechList = styled.ul`\n  color: var(--text-secondary);\n  margin-left: 1rem;\n  \n  li {\n    margin-bottom: 0.5rem;\n    \n    code {\n      background: rgba(0, 255, 255, 0.1);\n      color: var(--accent-color);\n      padding: 0.2rem 0.4rem;\n      border-radius: 4px;\n      font-size: 0.9rem;\n    }\n  }\n`\n\nconst CodeSection = styled.details`\n  margin-top: 2rem;\n  \n  summary {\n    color: var(--accent-color);\n    cursor: pointer;\n    font-weight: 600;\n    margin-bottom: 1rem;\n  }\n  \n  pre {\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 8px;\n    padding: 1rem;\n    overflow-x: auto;\n    font-size: 0.8rem;\n    color: var(--text-secondary);\n  }\n`\n\n// Geometry components\nfunction GeometryMesh({ geometry, position, color, name, wireframe = false }) {\n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.5\n      meshRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.3) * 0.2\n    }\n  })\n  \n  return (\n    <group position={position}>\n      <mesh ref={meshRef} geometry={geometry} castShadow receiveShadow>\n        <meshStandardMaterial \n          color={color} \n          wireframe={wireframe}\n          transparent\n          opacity={wireframe ? 0.8 : 0.9}\n        />\n      </mesh>\n      <Text\n        position={[0, -2, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        {name}\n      </Text>\n    </group>\n  )\n}\n\nfunction CustomGeometry({ position }) {\n  const geometry = useMemo(() => {\n    const geo = new THREE.BufferGeometry()\n    \n    // Create a star shape\n    const vertices = []\n    const indices = []\n    const colors = []\n    \n    const outerRadius = 1\n    const innerRadius = 0.5\n    const points = 5\n    \n    // Center vertex\n    vertices.push(0, 0, 0)\n    colors.push(1, 1, 0) // Yellow center\n    \n    // Outer and inner vertices\n    for (let i = 0; i < points * 2; i++) {\n      const angle = (i / (points * 2)) * Math.PI * 2\n      const radius = i % 2 === 0 ? outerRadius : innerRadius\n      \n      vertices.push(\n        Math.cos(angle) * radius,\n        Math.sin(angle) * radius,\n        0\n      )\n      \n      // Alternate colors\n      if (i % 2 === 0) {\n        colors.push(1, 0.5, 0) // Orange for outer points\n      } else {\n        colors.push(0.5, 1, 0.5) // Light green for inner points\n      }\n    }\n    \n    // Create triangles\n    for (let i = 0; i < points * 2; i++) {\n      const next = (i + 1) % (points * 2) + 1\n      indices.push(0, i + 1, next)\n    }\n    \n    geo.setIndex(indices)\n    geo.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3))\n    geo.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))\n    geo.computeVertexNormals()\n    \n    return geo\n  }, [])\n  \n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.z = state.clock.elapsedTime * 0.5\n    }\n  })\n  \n  return (\n    <group position={position}>\n      <mesh ref={meshRef} geometry={geometry}>\n        <meshStandardMaterial vertexColors side={THREE.DoubleSide} />\n      </mesh>\n      <Text\n        position={[0, -2, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        自定义几何体\n      </Text>\n    </group>\n  )\n}\n\nfunction ParametricGeometry({ position }) {\n  const geometry = useMemo(() => {\n    // Create a parametric surface (Klein bottle-like shape) using BufferGeometry\n    const slices = 25\n    const stacks = 25\n    const vertices = []\n    const indices = []\n    const normals = []\n    const uvs = []\n    \n    for (let i = 0; i <= slices; i++) {\n      for (let j = 0; j <= stacks; j++) {\n        const u = i / slices\n        const v = j / stacks\n        \n        const uAngle = u * Math.PI\n        const vAngle = v * 2 * Math.PI\n        \n        const x = Math.cos(uAngle) * (3 + Math.cos(vAngle)) * 0.3\n        const y = Math.sin(uAngle) * (3 + Math.cos(vAngle)) * 0.3\n        const z = Math.sin(vAngle) * 0.3\n        \n        vertices.push(x, y, z)\n        normals.push(0, 0, 1) // Simple normal for now\n        uvs.push(u, v)\n      }\n    }\n    \n    // Create indices for triangles\n    for (let i = 0; i < slices; i++) {\n      for (let j = 0; j < stacks; j++) {\n        const a = i * (stacks + 1) + j\n        const b = a + stacks + 1\n        const c = a + 1\n        const d = b + 1\n        \n        indices.push(a, b, c)\n        indices.push(b, d, c)\n      }\n    }\n    \n    const geometry = new THREE.BufferGeometry()\n    geometry.setIndex(indices)\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3))\n    geometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3))\n    geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2))\n    geometry.computeVertexNormals()\n    \n    return geometry\n  }, [])\n  \n  const meshRef = useRef()\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.x = state.clock.elapsedTime * 0.3\n      meshRef.current.rotation.y = state.clock.elapsedTime * 0.5\n    }\n  })\n  \n  return (\n    <group position={position}>\n      <mesh ref={meshRef} geometry={geometry}>\n        <meshStandardMaterial \n          color=\"#9b59b6\" \n          side={THREE.DoubleSide}\n          wireframe\n        />\n      </mesh>\n      <Text\n        position={[0, -2, 0]}\n        fontSize={0.3}\n        color=\"#ffffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        参数几何体\n      </Text>\n    </group>\n  )\n}\n\nfunction Scene() {\n  const { \n    showWireframe,\n    geometryScale,\n    animationSpeed\n  } = useControls('几何体控制', {\n    showWireframe: { value: false },\n    geometryScale: { value: 1, min: 0.5, max: 2, step: 0.1 },\n    animationSpeed: { value: 1, min: 0, max: 3, step: 0.1 }\n  })\n  \n  // Create geometries\n  const geometries = useMemo(() => {\n    return {\n      box: new THREE.BoxGeometry(1, 1, 1),\n      sphere: new THREE.SphereGeometry(0.8, 32, 32),\n      cylinder: new THREE.CylinderGeometry(0.5, 0.8, 1.5, 32),\n      cone: new THREE.ConeGeometry(0.8, 1.5, 32),\n      torus: new THREE.TorusGeometry(0.8, 0.3, 16, 100),\n      torusKnot: new THREE.TorusKnotGeometry(0.6, 0.2, 100, 16),\n      dodecahedron: new THREE.DodecahedronGeometry(0.8),\n      icosahedron: new THREE.IcosahedronGeometry(0.8),\n      octahedron: new THREE.OctahedronGeometry(0.8),\n      tetrahedron: new THREE.TetrahedronGeometry(0.8),\n      plane: new THREE.PlaneGeometry(1.5, 1.5, 10, 10),\n      ring: new THREE.RingGeometry(0.3, 0.8, 32),\n      tube: new THREE.TubeGeometry(\n        new THREE.CatmullRomCurve3([\n          new THREE.Vector3(-0.5, 0, 0),\n          new THREE.Vector3(0, 0.5, 0),\n          new THREE.Vector3(0.5, 0, 0),\n          new THREE.Vector3(0, -0.5, 0)\n        ], true),\n        64, 0.2, 8, true\n      )\n    }\n  }, [])\n  \n  const colors = [\n    '#e74c3c', '#3498db', '#2ecc71', '#f39c12',\n    '#9b59b6', '#1abc9c', '#e67e22', '#34495e',\n    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4',\n    '#feca57'\n  ]\n  \n  const positions = [\n    [-6, 2, 0], [-3, 2, 0], [0, 2, 0], [3, 2, 0], [6, 2, 0],\n    [-6, -1, 0], [-3, -1, 0], [0, -1, 0], [3, -1, 0], [6, -1, 0],\n    [-4.5, -4, 0], [-1.5, -4, 0], [1.5, -4, 0]\n  ]\n  \n  const names = [\n    '立方体', '球体', '圆柱体', '圆锥体', '圆环体',\n    '环结体', '十二面体', '二十面体', '八面体', '四面体',\n    '平面', '圆环', '管道'\n  ]\n  \n  return (\n    <>\n      {/* Ground plane */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -6, 0]} receiveShadow>\n        <planeGeometry args={[30, 20]} />\n        <meshStandardMaterial color=\"#2c3e50\" transparent opacity={0.3} />\n      </mesh>\n      \n      {/* Geometry showcase */}\n      {Object.entries(geometries).map(([key, geometry], index) => (\n        <group key={key} scale={geometryScale}>\n          <GeometryMesh\n            geometry={geometry}\n            position={positions[index]}\n            color={colors[index]}\n            name={names[index]}\n            wireframe={showWireframe}\n          />\n        </group>\n      ))}\n      \n      {/* Custom geometries */}\n      <group scale={geometryScale}>\n        <CustomGeometry position={[4.5, -4, 0]} />\n        <ParametricGeometry position={[7.5, -4, 0]} />\n      </group>\n      \n      {/* Title */}\n      <Text\n        position={[0, 5, 0]}\n        fontSize={1}\n        color=\"#00ffff\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        几何体展示厅\n      </Text>\n      \n      {/* Grid lines */}\n      <Line\n        points={[[-10, 0, 0], [10, 0, 0]]}\n        color=\"#444444\"\n        lineWidth={1}\n      />\n      <Line\n        points={[[0, -6, 0], [0, 6, 0]]}\n        color=\"#444444\"\n        lineWidth={1}\n      />\n    </>\n  )\n}\n\nfunction GeometryShowcase() {\n  return (\n    <PageContainer>\n      <CanvasContainer>\n        <Canvas\n          shadows\n          camera={{ position: [0, 0, 15], fov: 75 }}\n          gl={{ antialias: true }}\n        >\n          <Suspense fallback={null}>\n            <Scene />\n            <ambientLight intensity={0.4} />\n            <directionalLight\n              position={[10, 10, 5]}\n              intensity={1}\n              castShadow\n              shadow-mapSize-width={2048}\n              shadow-mapSize-height={2048}\n              shadow-camera-far={50}\n              shadow-camera-left={-20}\n              shadow-camera-right={20}\n              shadow-camera-top={20}\n              shadow-camera-bottom={-20}\n            />\n            <pointLight position={[-10, 5, -10]} intensity={0.3} color=\"#ff6b6b\" />\n            <pointLight position={[10, 5, 10]} intensity={0.3} color=\"#4ecdc4\" />\n            <OrbitControls\n              enableDamping\n              dampingFactor={0.05}\n              minDistance={5}\n              maxDistance={30}\n              maxPolarAngle={Math.PI / 2 + 0.5}\n            />\n          </Suspense>\n        </Canvas>\n      </CanvasContainer>\n      \n      <InfoPanel\n        initial={{ x: 350 }}\n        animate={{ x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <InfoTitle>\n          🔺 几何体展示\n        </InfoTitle>\n        \n        <InfoDescription>\n          Three.js 提供了丰富的内置几何体，从基础的立方体、球体到复杂的环结体、参数几何体。每种几何体都有其特定的用途和参数。\n        </InfoDescription>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem' }}>基础几何体</h3>\n        <TechList>\n          <li><code>BoxGeometry</code> - 立方体，最常用的几何体</li>\n          <li><code>SphereGeometry</code> - 球体，适合制作球形物体</li>\n          <li><code>CylinderGeometry</code> - 圆柱体，可制作柱子、管道</li>\n          <li><code>ConeGeometry</code> - 圆锥体，制作锥形物体</li>\n          <li><code>PlaneGeometry</code> - 平面，常用作地面、墙面</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>高级几何体</h3>\n        <TechList>\n          <li><code>TorusGeometry</code> - 圆环体，甜甜圈形状</li>\n          <li><code>TorusKnotGeometry</code> - 环结体，复杂的扭结形状</li>\n          <li><code>TubeGeometry</code> - 管道几何体，沿路径挤出</li>\n          <li><code>ParametricGeometry</code> - 参数几何体，数学函数定义</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>多面体</h3>\n        <TechList>\n          <li><code>TetrahedronGeometry</code> - 四面体，4个三角面</li>\n          <li><code>OctahedronGeometry</code> - 八面体，8个三角面</li>\n          <li><code>DodecahedronGeometry</code> - 十二面体，12个五边形面</li>\n          <li><code>IcosahedronGeometry</code> - 二十面体，20个三角面</li>\n        </TechList>\n        \n        <h3 style={{ color: 'var(--accent-color)', marginBottom: '1rem', marginTop: '2rem' }}>自定义几何体</h3>\n        <InfoDescription>\n          使用 <code>BufferGeometry</code> 可以创建完全自定义的几何体，通过定义顶点、面、法线等数据来构建任意形状。\n        </InfoDescription>\n        \n        <CodeSection>\n          <summary>🔍 查看核心代码</summary>\n          <pre>{`// 基础几何体创建\nconst boxGeometry = new THREE.BoxGeometry(1, 1, 1)\nconst sphereGeometry = new THREE.SphereGeometry(0.8, 32, 32)\nconst torusGeometry = new THREE.TorusGeometry(0.8, 0.3, 16, 100)\n\n// 自定义几何体\nconst customGeometry = new THREE.BufferGeometry()\nconst vertices = new Float32Array([\n  -1, -1, 0,  // 顶点1\n   1, -1, 0,  // 顶点2\n   0,  1, 0   // 顶点3\n])\ncustomGeometry.setAttribute('position', \n  new THREE.BufferAttribute(vertices, 3))\n\n// 参数几何体\n// Create parametric geometry using BufferGeometry\nconst createParametricGeometry = () => {\n  const slices = 25, stacks = 25\n  const vertices = [], indices = []\n  \n  for (let i = 0; i <= slices; i++) {\n    for (let j = 0; j <= stacks; j++) {\n      const u = (i / slices) * Math.PI * 2\n      const v = (j / stacks) * Math.PI\n      \n      const x = Math.cos(u) * Math.sin(v)\n      const y = Math.sin(u) * Math.sin(v)\n      const z = Math.cos(v)\n      \n      vertices.push(x, y, z)\n    }\n  }\n  \n  const geometry = new THREE.BufferGeometry()\n  geometry.setAttribute('position', \n    new THREE.Float32BufferAttribute(vertices, 3))\n  return geometry\n}\nconst parametricGeometry = createParametricGeometry()`}</pre>\n        </CodeSection>\n      </InfoPanel>\n    </PageContainer>\n  )\n}\n\nexport default GeometryShowcase"],"names":["PageContainer","styled","CanvasContainer","InfoPanel","motion","InfoTitle","InfoDescription","TechList","CodeSection","GeometryMesh","geometry","position","color","name","wireframe","meshRef","useRef","useFrame","state","jsxs","jsx","Text","CustomGeometry","useMemo","geo","THREE.BufferGeometry","vertices","indices","colors","outerRadius","innerRadius","points","i","angle","radius","next","THREE.Float32BufferAttribute","THREE.DoubleSide","ParametricGeometry","normals","uvs","j","u","v","uAngle","vAngle","x","y","z","a","b","c","d","Scene","showWireframe","geometryScale","animationSpeed","useControls","geometries","THREE.BoxGeometry","THREE.SphereGeometry","THREE.CylinderGeometry","THREE.ConeGeometry","THREE.TorusGeometry","THREE.TorusKnotGeometry","THREE.DodecahedronGeometry","THREE.IcosahedronGeometry","THREE.OctahedronGeometry","THREE.TetrahedronGeometry","THREE.PlaneGeometry","THREE.RingGeometry","THREE.TubeGeometry","THREE.CatmullRomCurve3","THREE.Vector3","positions","names","Fragment","key","index","Line","GeometryShowcase","Canvas","Suspense","OrbitControls"],"mappings":"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"}